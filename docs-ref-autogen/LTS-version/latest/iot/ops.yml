### YamlMime:AzureCLIGroup
uid: az_iot_ops
name: az iot ops
extensionInformation: >-
  > [!NOTE]

  > This reference is part of the **azure-iot-ops** extension for the Azure CLI (version 2.53.0 or higher). The extension will automatically install the first time you run an **az iot ops** command. [Learn more](https://learn.microsoft.com/cli/azure/azure-cli-extensions-overview) about extensions.
summary: |-
  Manage Azure IoT Operations.
description: |-
  Azure IoT Operations is a set of highly aligned, but loosely coupled, first-party
  Kubernetes services that enable you to aggregate data from on-prem assets into an
  industrial-grade MQTT Broker, add edge compute and set up bi-directional data flow with
  a variety of services in the cloud.

  By default IoT Operations CLI commands will periodically check to see if a new extension version is available.
  This behavior can be disabled with `az config set iotops.check_latest=false`.
status: GA
sourceType: Extension
directCommands:
- uid: az_iot_ops_check
  name: az iot ops check
  summary: |-
    Evaluate cluster-side readiness and runtime health of deployed IoT Operations services.
  description: |-
    The command by default shows a high-level human friendly _summary_ view of all services.
    Use the '--svc' option to specify checks for a single service, and configure verbosity via the `--detail-level` argument.
    Note: Resource kind (--resources) and name (--resource-name) filtering can only be used with the '--svc' argument.

    {Supported service APIs}
    - deviceregistry.microsoft.com/[v1]
    - mqttbroker.iotoperations.azure.com/[v1]
    - opcuabroker.iotoperations.azure.com/[v1beta1]
    - connectivity.iotoperations.azure.com/[v1]

    For more information on cluster requirements, please check https://aka.ms/iot-ops-cluster-requirements.
  status: Preview
  isPreview: true
  previewOrExperimentalInfo: 'This command is in preview and under development. Reference and support levels: https://aka.ms/CLI_refstatus'
  sourceType: Extension
  syntax: >-
    az iot ops check [--as-object {false, true}]
                     [--context]
                     [--detail-level {0, 1, 2}]
                     [--ops-service {akri, broker, dataflow, deviceregistry, opcua}]
                     [--post {false, true}]
                     [--pre {false, true}]
                     [--resource-name]
                     [--resources {asset, assetendpointprofile, assettype, broker, brokerauthentication, brokerauthorization, brokerlistener, dataflow, dataflowendpoint, dataflowprofile}]
  examples:
  - summary: |-
      Basic usage. Checks overall IoT Operations health with summary output.
    syntax: az iot ops check
  - summary: |-
      Checks `broker` service health and configuration with detailed output.
    syntax: az iot ops check --svc broker --detail-level 1
  - summary: |-
      Evaluate only the `dataflow` service with output optimized for CI.
    syntax: az iot ops check --svc dataflow --as-object
  - summary: |-
      Checks `deviceregistry` health with verbose output, but constrains results to `asset` resources.
    syntax: az iot ops check --svc deviceregistry --detail-level 2 --resources asset
  - summary: |-
      Use resource name to constrain results to `asset` resources with `my-asset-` name prefix
    syntax: az iot ops check --svc deviceregistry --resources asset --resource-name 'my-asset-*'
  optionalParameters:
  - name: --as-object
    parameterValueGroup: "false, true"
    summary: |-
      Output check content and validations in a CI friendly data structure.
  - name: --context
    summary: |-
      Kubeconfig context name to use for k8s cluster communication. If no context is provided current_context is used.
  - name: --detail-level
    defaultValue: "0"
    parameterValueGroup: "0, 1, 2"
    summary: |-
      Controls the level of detail displayed in the check output. Choose 0 for a summary view (minimal output), 1 for a detailed view (more comprehensive information), or 2 for a verbose view (all available information).
  - name: --ops-service --svc
    parameterValueGroup: "akri, broker, dataflow, deviceregistry, opcua"
    summary: |-
      The IoT Operations service deployment that will be evaluated.
  - name: --post
    parameterValueGroup: "false, true"
    summary: |-
      Run post-deployment checks.
  - name: --pre
    parameterValueGroup: "false, true"
    summary: |-
      Run pre-requisite checks to determine if the minimum requirements of a service deployment are fulfilled.
  - name: --resource-name --rn
    summary: |-
      Only run checks for the specific resource name. The name is case insensitive. Glob patterns '*' and '?' are supported. Note: Only alphanumeric characters, hyphens, '?' and '*' are allowed.
  - name: --resources
    parameterValueGroup: "asset, assetendpointprofile, assettype, broker, brokerauthentication, brokerauthorization, brokerlistener, dataflow, dataflowendpoint, dataflowprofile"
    summary: |-
      Only run checks on specific resource kinds. Use space-separated values.
- uid: az_iot_ops_create
  name: az iot ops create
  summary: |-
    Create an IoT Operations instance.
  description: |-
    A succesful execution of init is required before running this command.

    The result of the command nets an IoT Operations instance with
    a set of default resources configured for cohesive function.
  status: GA
  sourceType: Extension
  syntax: >-
    az iot ops create --cluster
                      --name
                      --resource-group
                      --sr-resource-id
                      [--add-insecure-listener {false, true}]
                      [--bp]
                      [--br]
                      [--broker-backend-workers]
                      [--broker-config-file]
                      [--broker-frontend-replicas]
                      [--broker-frontend-workers]
                      [--broker-listener-type {ClusterIp, LoadBalancer, NodePort}]
                      [--broker-mem-profile {High, Low, Medium, Tiny}]
                      [--cluster-namespace]
                      [--custom-location]
                      [--description]
                      [--df-profile-instances]
                      [--enable-rsync {false, true}]
                      [--kubernetes-distro {K3s, K8s, MicroK8s}]
                      [--location]
                      [--no-progress {false, true}]
                      [--ops-config]
                      [--runtime-socket]
                      [--tags]
                      [--trust-settings]
                      [--yes {false, true}]
  examples:
  - summary: |-
      Create the target instance with minimum input.
    syntax: az iot ops create --cluster mycluster -g myresourcegroup --name myinstance --sr-resource-id $SCHEMA_REGISTRY_RESOURCE_ID
  - summary: |-
      The following example adds customization to the default broker instance resource as well as an instance description and tags.
    syntax: az iot ops create --cluster mycluster -g myresourcegroup --name myinstance --sr-resource-id $SCHEMA_REGISTRY_RESOURCE_ID --broker-mem-profile High --broker-backend-workers 4 --description 'Contoso Factory' --tags tier=testX1
  - summary: |-
      This example shows deploying an additional insecure (no authn or authz) broker listener configured for port 1883 of service type load balancer. Useful for testing and/or demos. Do not use the insecure option in production.
    syntax: az iot ops create --cluster mycluster -g myresourcegroup --name myinstance --sr-resource-id $SCHEMA_REGISTRY_RESOURCE_ID --add-insecure-listener
  - summary: |-
      This form shows how to enable resource sync for the instance deployment. To enable resource sync role assignment write is necessary on the target resource group.
    syntax: az iot ops create --cluster mycluster -g myresourcegroup --name myinstance --sr-resource-id $SCHEMA_REGISTRY_RESOURCE_ID --enable-rsync
  - summary: |-
      This example highlights trust settings for a user provided cert-manager config. Note that the cluster must have been initialized with `--user-trust` and a user cert-manager deployment must be present.
    syntax: az iot ops create --cluster mycluster -g myresourcegroup --name myinstance --sr-resource-id $SCHEMA_REGISTRY_RESOURCE_ID --trust-settings configMapName=example-bundle configMapKey=trust-bundle.pem issuerKind=ClusterIssuer issuerName=trust-manager-selfsigned-issuer
  requiredParameters:
  - isRequired: true
    name: --cluster
    summary: |-
      Target cluster name for IoT Operations deployment.
  - isRequired: true
    name: --name -n
    summary: |-
      IoT Operations instance name.
  - isRequired: true
    name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
  - isRequired: true
    name: --sr-resource-id
    summary: |-
      The schema registry resource Id to use with IoT Operations.
  optionalParameters:
  - name: --add-insecure-listener
    parameterValueGroup: "false, true"
    summary: |-
      When enabled the mqtt broker deployment will include a listener of service type LoadBalancer, bound to port 1883 with no authN or authZ. For non-production workloads only.
  - name: --bp --broker-backend-part
    defaultValue: "2"
    summary: |-
      Mqtt broker backend partitions. Min value: 1, max value: 16.
  - name: --br --broker-backend-rf
    defaultValue: "2"
    summary: |-
      Mqtt broker backend redundancy factor. Min value: 1, max value: 5.
  - name: --broker-backend-workers --bw
    defaultValue: "2"
    summary: |-
      Mqtt broker backend workers. Min value: 1, max value: 16.
  - name: --broker-config-file
    summary: |-
      Path to a json file with custom broker config properties. File config content is used over individual broker config parameters. Useful for advanced scenarios. The expected format is described at https://aka.ms/aziotops-broker-config.
  - name: --broker-frontend-replicas --fr
    defaultValue: "2"
    summary: |-
      Mqtt broker frontend replicas. Min value: 1, max value: 16.
  - name: --broker-frontend-workers --fw
    defaultValue: "2"
    summary: |-
      Mqtt broker frontend workers. Min value: 1, max value: 16.
  - name: --broker-listener-type --lt
    defaultValue: "ClusterIp"
    parameterValueGroup: "ClusterIp, LoadBalancer, NodePort"
    summary: |-
      Service type associated with the default mqtt broker listener.
  - name: --broker-mem-profile --mp
    defaultValue: "Medium"
    parameterValueGroup: "High, Low, Medium, Tiny"
    summary: |-
      Mqtt broker memory profile.
  - name: --cluster-namespace
    defaultValue: "azure-iot-operations"
    summary: |-
      The cluster namespace IoT Operations infra will be deployed to. Must be lowercase.
  - name: --custom-location
    summary: |-
      The custom location name corresponding to the IoT Operations deployment. The default is in the form 'location-{hash(5)}'.
  - name: --description
    summary: |-
      Description of the IoT Operations instance.
  - name: --df-profile-instances
    defaultValue: "1"
    summary: |-
      The instance count associated with the default dataflow profile.
  - name: --enable-rsync
    parameterValueGroup: "false, true"
    summary: |-
      Resource sync rules will be included in the IoT Operations deployment.
  - name: --kubernetes-distro
    defaultValue: "K8s"
    parameterValueGroup: "K3s, K8s, MicroK8s"
    summary: |-
      The Kubernetes distro to use for Akri configuration. The selected distro implies the default container runtime socket path when no --runtime-socket value is provided.
  - name: --location
    summary: |-
      The region that will be used for provisioned resource collateral. If not provided the connected cluster location will be used.
  - name: --no-progress
    parameterValueGroup: "false, true"
    summary: |-
      Disable visual representation of work.
  - name: --ops-config
    summary: |-
      IoT Operations arc extension custom configuration. Format is space-separated key=value pairs. --ops-config can be used one or more times. For advanced use cases.
  - name: --runtime-socket
    summary: |-
      The default node path of the container runtime socket. If not provided (default), the socket path is determined by --kubernetes-distro.
  - name: --tags
    summary: |-
      Instance tags. Property bag in key-value pairs with the following format: a=b c=d. Use --tags "" to remove all tags.
  - name: --trust-settings
    summary: |-
      Settings for user provided trust bundle. Used for component TLS. Format is space-separated key=value pairs. The following keys are required: `issuerName`, `issuerKind`, `configMapName`, `configMapKey`. If not used, a system provided self-signed trust bundle is configured.
  - name: --yes -y
    parameterValueGroup: "false, true"
    summary: |-
      Confirm [y]es without a prompt. Useful for CI and automation scenarios.
- uid: az_iot_ops_delete
  name: az iot ops delete
  summary: |-
    Delete IoT Operations from the cluster.
  description: |-
    The name of either the instance or cluster must be provided.

    The operation uses Azure Resource Graph to determine correlated resources.
    Resource Graph being eventually consistent does not guarantee a synchronized state at the
    time of execution.
  status: GA
  sourceType: Extension
  syntax: >-
    az iot ops delete --resource-group
                      [--cluster]
                      [--force {false, true}]
                      [--include-deps {false, true}]
                      [--name]
                      [--no-progress {false, true}]
                      [--yes {false, true}]
  examples:
  - summary: |-
      Minimum input for complete deletion.
    syntax: az iot ops delete -n myinstance -g myresourcegroup
  - summary: |-
      Skip confirmation prompt and continue to deletion process. Useful for CI scenarios.
    syntax: az iot ops delete -n myinstance -g myresourcegroup -y
  - summary: |-
      Force deletion regardless of warnings. May lead to errors.
    syntax: az iot ops delete -n myinstance -g myresourcegroup --force
  - summary: |-
      Use cluster name instead of instance for lookup.
    syntax: az iot ops delete --cluster mycluster -g myresourcegroup
  - summary: |-
      Reverse application of init.
    syntax: az iot ops delete -n myinstance -g myresourcegroup --include-deps
  requiredParameters:
  - isRequired: true
    name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
  optionalParameters:
  - name: --cluster
    summary: |-
      Target cluster name for IoT Operations deletion.
  - name: --force
    parameterValueGroup: "false, true"
    summary: |-
      Force the operation to execute.
  - name: --include-deps
    parameterValueGroup: "false, true"
    summary: |-
      Indicates the command should remove IoT Operations dependencies. This option is intended to reverse the application of init.
  - name: --name -n
    summary: |-
      IoT Operations instance name.
  - name: --no-progress
    parameterValueGroup: "false, true"
    summary: |-
      Disable visual representation of work.
  - name: --yes -y
    parameterValueGroup: "false, true"
    summary: |-
      Confirm [y]es without a prompt. Useful for CI and automation scenarios.
- uid: az_iot_ops_init
  name: az iot ops init
  summary: |-
    Bootstrap the Arc-enabled cluster for IoT Operations deployment.
  description: |-
    An Arc-enabled cluster is required to deploy IoT Operations. See the following resource for
    more info https://aka.ms/aziotops-arcconnect.

    The init operation will do work in installing and configuring a foundation layer of edge
    services necessary for IoT Operations deployment.

    After the foundation layer has been installed the `az iot ops create` command should
    be used to deploy an instance.
  status: GA
  sourceType: Extension
  syntax: >-
    az iot ops init --cluster
                    --resource-group
                    [--enable-fault-tolerance {false, true}]
                    [--ensure-latest {false, true}]
                    [--no-progress {false, true}]
                    [--user-trust {false, true}]
  examples:
  - summary: |-
      Usage with minimum input. This form will deploy the IoT Operations foundation layer.
    syntax: az iot ops init --cluster mycluster -g myresourcegroup
  - summary: |-
      Similar to the prior example but with Arc Container Storage fault-tolerance enabled (requires at least 3 nodes).
    syntax: az iot ops init --cluster mycluster -g myresourcegroup --enable-fault-tolerance
  - summary: |-
      This example highlights enabling user trust settings for a custom cert-manager config. This will skip deployment of the system cert-manager and trust-manager.
    syntax: az iot ops init --cluster mycluster -g myresourcegroup --user-trust
  requiredParameters:
  - isRequired: true
    name: --cluster
    summary: |-
      Target cluster name for IoT Operations deployment.
  - isRequired: true
    name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
  optionalParameters:
  - name: --enable-fault-tolerance
    parameterValueGroup: "false, true"
    summary: |-
      Enable fault tolerance for Azure Arc Container Storage. At least 3 cluster nodes are required.
  - name: --ensure-latest
    parameterValueGroup: "false, true"
    summary: |-
      Ensure the latest IoT Ops CLI is being used, raising an error if an upgrade is available.
  - name: --no-progress
    parameterValueGroup: "false, true"
    summary: |-
      Disable visual representation of work.
  - name: --user-trust --ut
    parameterValueGroup: "false, true"
    summary: |-
      Skip the deployment of the system cert-manager and trust-manager in favor of a user-provided configuration.
- uid: az_iot_ops_list
  name: az iot ops list
  summary: |-
    List IoT Operations instances.
  description: |-
    Use --query with desired JMESPath syntax to query the result.
  status: GA
  sourceType: Extension
  syntax: az iot ops list [--resource-group]
  examples:
  - summary: |-
      List all instances in the subscription.
    syntax: az iot ops list
  - summary: |-
      List all instances of a particular resource group.
    syntax: az iot ops list -g myresourcegroup
  - summary: |-
      List the instances in the subscription that have a particular tag value.
    syntax: az iot ops list -g myresourcegroup --query "[?tags.env == 'prod']"
  optionalParameters:
  - name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
- uid: az_iot_ops_show
  name: az iot ops show
  summary: |-
    Show an IoT Operations instance.
  description: |-
    Optionally the command can output a tree structure of associated resources representing the IoT Operations deployment against the backing cluster.
  status: GA
  sourceType: Extension
  syntax: >-
    az iot ops show --name
                    --resource-group
                    [--tree {false, true}]
  examples:
  - summary: |-
      Basic usage to show an instance.
    syntax: az iot ops show --name myinstance -g myresourcegroup
  - summary: |-
      Output a tree structure of associated resources representing the IoT Operations deployment.
    syntax: az iot ops show --name myinstance -g myresourcegroup --tree
  requiredParameters:
  - isRequired: true
    name: --name -n
    summary: |-
      IoT Operations instance name.
  - isRequired: true
    name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
  optionalParameters:
  - name: --tree
    parameterValueGroup: "false, true"
    summary: |-
      Use to visualize the IoT Operations deployment against the backing cluster.
- uid: az_iot_ops_update
  name: az iot ops update
  summary: |-
    Update an IoT Operations instance.
  description: |-
    Currently instance tags and description can be updated.
  status: GA
  sourceType: Extension
  syntax: >-
    az iot ops update --name
                      --resource-group
                      [--description]
                      [--tags]
  examples:
  - summary: |-
      Update instance tags. This is equivalent to a replace.
    syntax: az iot ops update --name myinstance -g myresourcegroup --tags a=b c=d
  - summary: |-
      Remove instance tags.
    syntax: az iot ops update --name myinstance -g myresourcegroup --tags ""
  - summary: |-
      Update the instance description.
    syntax: az iot ops update --name myinstance -g myresourcegroup --desc "Fabrikam Widget Factory B42"
  requiredParameters:
  - isRequired: true
    name: --name -n
    summary: |-
      IoT Operations instance name.
  - isRequired: true
    name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
  optionalParameters:
  - name: --description
    summary: |-
      Description of the IoT Operations instance.
  - name: --tags
    summary: |-
      Instance tags. Property bag in key-value pairs with the following format: a=b c=d. Use --tags "" to remove all tags.
- uid: az_iot_ops_upgrade
  name: az iot ops upgrade
  summary: |-
    Upgrade an IoT Operations instance.
  description: |-
    By default, with no options, the command will evaluate versions of the
    deployed cluster side services that make up IoT Operations and compare them
    with the built-in deployment that would be executed with `az iot ops init`
    and `az iot ops create`.
  status: GA
  sourceType: Extension
  syntax: >-
    az iot ops upgrade --name
                       --resource-group
                       [--acs-config]
                       [--no-progress {false, true}]
                       [--ops-config]
                       [--osm-config]
                       [--plat-config]
                       [--ssc-config]
                       [--yes {false, true}]
  examples:
  - summary: |-
      Upgrade the instance with minimal inputs.
    syntax: az iot ops upgrade --name myinstance -g myresourcegroup
  - summary: |-
      Skip the confirmation prompt for instance upgrade. Useful for CI scenarios.
    syntax: az iot ops upgrade --name myinstance -g myresourcegroup -y
  - summary: |-
      Set extension config settings that apply should be during upgrade. To remove a setting provide the key with no value.
    syntax: az iot ops upgrade --name myinstance -g myresourcegroup --ops-config key1=value1 deletekey
  requiredParameters:
  - isRequired: true
    name: --name -n
    summary: |-
      IoT Operations instance name.
  - isRequired: true
    name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
  optionalParameters:
  - name: --acs-config
    summary: |-
      ContainerStorage arc extension custom config. Format is space-separated key=value pairs or just the key. This option can be used one or more times.
  - name: --no-progress
    parameterValueGroup: "false, true"
    summary: |-
      Disable visual representation of work.
  - name: --ops-config
    summary: |-
      IotOperations arc extension custom config. Format is space-separated key=value pairs or just the key. This option can be used one or more times.
  - name: --osm-config
    summary: |-
      OpenServiceMesh arc extension custom config. Format is space-separated key=value pairs or just the key. This option can be used one or more times.
  - name: --plat-config
    summary: |-
      Platform arc extension custom config. Format is space-separated key=value pairs or just the key. This option can be used one or more times.
  - name: --ssc-config
    summary: |-
      SecretStore arc extension custom config. Format is space-separated key=value pairs or just the key. This option can be used one or more times.
  - name: --yes -y
    parameterValueGroup: "false, true"
    summary: |-
      Confirm [y]es without a prompt. Useful for CI and automation scenarios.
commands:
- az_iot_ops_asset
- az_iot_ops_asset_create
- az_iot_ops_asset_dataset
- az_iot_ops_asset_dataset_list
- az_iot_ops_asset_dataset_point
- az_iot_ops_asset_dataset_point_add
- az_iot_ops_asset_dataset_point_export
- az_iot_ops_asset_dataset_point_import
- az_iot_ops_asset_dataset_point_list
- az_iot_ops_asset_dataset_point_remove
- az_iot_ops_asset_dataset_show
- az_iot_ops_asset_delete
- az_iot_ops_asset_endpoint
- az_iot_ops_asset_endpoint_create
- az_iot_ops_asset_endpoint_create_opcua
- az_iot_ops_asset_endpoint_delete
- az_iot_ops_asset_endpoint_query
- az_iot_ops_asset_endpoint_show
- az_iot_ops_asset_endpoint_update
- az_iot_ops_asset_event
- az_iot_ops_asset_event_add
- az_iot_ops_asset_event_export
- az_iot_ops_asset_event_import
- az_iot_ops_asset_event_list
- az_iot_ops_asset_event_remove
- az_iot_ops_asset_query
- az_iot_ops_asset_show
- az_iot_ops_asset_update
- az_iot_ops_broker
- az_iot_ops_broker_authn
- az_iot_ops_broker_authn_delete
- az_iot_ops_broker_authn_list
- az_iot_ops_broker_authn_show
- az_iot_ops_broker_authz
- az_iot_ops_broker_authz_delete
- az_iot_ops_broker_authz_list
- az_iot_ops_broker_authz_show
- az_iot_ops_broker_delete
- az_iot_ops_broker_list
- az_iot_ops_broker_listener
- az_iot_ops_broker_listener_delete
- az_iot_ops_broker_listener_list
- az_iot_ops_broker_listener_show
- az_iot_ops_broker_show
- az_iot_ops_check
- az_iot_ops_connector
- az_iot_ops_connector_opcua
- az_iot_ops_connector_opcua_client
- az_iot_ops_connector_opcua_client_add
- az_iot_ops_connector_opcua_client_remove
- az_iot_ops_connector_opcua_client_show
- az_iot_ops_connector_opcua_issuer
- az_iot_ops_connector_opcua_issuer_add
- az_iot_ops_connector_opcua_issuer_remove
- az_iot_ops_connector_opcua_issuer_show
- az_iot_ops_connector_opcua_trust
- az_iot_ops_connector_opcua_trust_add
- az_iot_ops_connector_opcua_trust_remove
- az_iot_ops_connector_opcua_trust_show
- az_iot_ops_create
- az_iot_ops_dataflow
- az_iot_ops_dataflow_endpoint
- az_iot_ops_dataflow_endpoint_list
- az_iot_ops_dataflow_endpoint_show
- az_iot_ops_dataflow_list
- az_iot_ops_dataflow_profile
- az_iot_ops_dataflow_profile_list
- az_iot_ops_dataflow_profile_show
- az_iot_ops_dataflow_show
- az_iot_ops_delete
- az_iot_ops_identity
- az_iot_ops_identity_assign
- az_iot_ops_identity_remove
- az_iot_ops_identity_show
- az_iot_ops_init
- az_iot_ops_list
- az_iot_ops_schema
- az_iot_ops_schema_create
- az_iot_ops_schema_delete
- az_iot_ops_schema_list
- az_iot_ops_schema_registry
- az_iot_ops_schema_registry_create
- az_iot_ops_schema_registry_delete
- az_iot_ops_schema_registry_list
- az_iot_ops_schema_registry_show
- az_iot_ops_schema_show
- az_iot_ops_schema_show-dataflow-refs
- az_iot_ops_schema_version
- az_iot_ops_schema_version_add
- az_iot_ops_schema_version_list
- az_iot_ops_schema_version_remove
- az_iot_ops_schema_version_show
- az_iot_ops_secretsync
- az_iot_ops_secretsync_disable
- az_iot_ops_secretsync_enable
- az_iot_ops_secretsync_list
- az_iot_ops_show
- az_iot_ops_support
- az_iot_ops_support_create-bundle
- az_iot_ops_update
- az_iot_ops_upgrade
globalParameters:
- name: --debug
  summary: |-
    Increase logging verbosity to show all debug logs.
- name: --help -h
  summary: |-
    Show this help message and exit.
- name: --only-show-errors
  summary: |-
    Only show errors, suppressing warnings.
- name: --output -o
  defaultValue: "json"
  parameterValueGroup: "json, jsonc, none, table, tsv, yaml, yamlc"
  summary: |-
    Output format.
- name: --query
  summary: |-
    JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
- name: --subscription
  summary: |-
    Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
- name: --verbose
  summary: |-
    Increase logging verbosity. Use --debug for full debug logs.
metadata:
  description: >-
    Azure IoT Operations is a set of highly aligned, but loosely coupled, first-party

    Kubernetes services that enable you to aggregate data from on-prem assets into an

    industrial-grade MQTT Broker, add edge compute and set up bi-directional data flow with

    a variety of services in the cloud.


    By default IoT Operations CLI commands will periodically check to see if a new extension version is available.

    This behavior can be disabled with `az config set iotops.check_latest=false`.
