### YamlMime:AzureCLIGroup
uid: az_batch_job-schedule
name: az batch job-schedule
summary: |-
  Manage Batch job schedules.
status: GA
sourceType: Core
directCommands:
- uid: az_batch_job-schedule_create
  name: az batch job-schedule create
  summary: |-
    Add a Batch job schedule to an account.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/batch/_help.py
  syntax: >-
    az batch job-schedule create [--account-endpoint]
                                 [--account-key]
                                 [--account-name]
                                 [--allow-task-preemption]
                                 [--do-not-run-after]
                                 [--do-not-run-until]
                                 [--id]
                                 [--job-manager-task-application-package-references]
                                 [--job-manager-task-command-line]
                                 [--job-manager-task-environment-settings]
                                 [--job-manager-task-id]
                                 [--job-manager-task-resource-files]
                                 [--job-max-task-retry-count]
                                 [--job-max-wall-clock-time]
                                 [--job-metadata]
                                 [--json-file]
                                 [--max-parallel-tasks]
                                 [--metadata]
                                 [--on-all-tasks-complete]
                                 [--pool-id]
                                 [--priority]
                                 [--recurrence-interval]
                                 [--required-slots]
                                 [--start-window]
                                 [--uses-task-dependencies]
  examples:
  - summary: |-
      Create an new job schedule with a 1 day interval.
    syntax: az batch job-schedule create --id jobschedule1 --pool-id pool1 --recurrence-interval P1D
  optionalParameters:
  - name: --account-endpoint
    summary: |-
      Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.
  - name: --account-key
    summary: |-
      Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.
  - name: --account-name
    summary: |-
      Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.
  - name: --allow-task-preemption
    summary: |-
      Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's allowTaskPreemption after it has been created using the update job API. True if flag present.
  - name: --do-not-run-after
    summary: |-
      A time after which no Job will be created under this Job Schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active Job under this Job Schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it. Expected format is an ISO-8601 timestamp.
  - name: --do-not-run-until
    summary: |-
      The earliest time at which any Job may be created under this Job Schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create Jobs immediately. Expected format is an ISO-8601 timestamp.
  - name: --id
    summary: |-
      A string that uniquely identifies the schedule within the Account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case). Required.
  - name: --job-manager-task-application-package-references
    summary: |-
      A list of Application Packages that the Batch service will deploy to the Compute Node before running the command line.Application Packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced Application Package is already on the Compute Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Application Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails. Space-separated application IDs with optional version in 'id[#version]' format.
  - name: --job-manager-task-command-line
    summary: |-
      The command line of the Job Manager Task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables). Required.
  - name: --job-manager-task-environment-settings
    summary: |-
      A list of environment variable settings for the Job Manager Task. Space-separated values in 'key=value' format.
  - name: --job-manager-task-id
    summary: |-
      A string that uniquely identifies the Job Manager Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. Required.
  - name: --job-manager-task-resource-files
    summary: |-
      A list of files that the Batch service will download to the Compute Node before running the command line. Files listed under this element are located in the Task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=httpurl format.
  - name: --job-max-task-retry-count
    summary: |-
      The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1, the Batch service retries Tasks without limit. The default value is 0 (no retries).
  - name: --job-max-wall-clock-time
    summary: |-
      The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may run. Expected format is an ISO-8601 duration.
  - name: --job-metadata
    summary: |-
      A list of name-value pairs associated with each Job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.
  - name: --json-file
    summary: |-
      A file containing the job schedule specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Schedule Arguments' are ignored.
  - name: --max-parallel-tasks
    summary: |-
      The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job API.
  - name: --metadata
    summary: |-
      A list of name-value pairs associated with the schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.
  - name: --on-all-tasks-complete
    summary: |-
      The action the Batch service should take when all Tasks in a Job created under this schedule are in the completed state. Note that if a Job contains no Tasks, then all Tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic Job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete to terminatejob once you have finished adding Tasks. The default is noaction. Known values are: "noaction" and "terminatejob".
  - name: --pool-id
    summary: |-
      The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but not both.
  - name: --priority
    summary: |-
      The priority of Jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all Jobs under the Job Schedule. You can update a Job's priority after it has been created using by using the update Job API.
  - name: --recurrence-interval
    summary: |-
      The time interval between the start times of two successive Jobs under the Job Schedule. A Job Schedule can have at most one active Job under it at any given time. Because a Job Schedule can have at most one active Job under it at any given time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service will not create the new Job until the previous Job finishes. If the previous Job does not finish within the startWindow period of the new recurrenceInterval, then no new Job will be scheduled for that interval. For recurring Jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when Jobs are created, add Tasks to the Jobs and terminate the Jobs ready for the next recurrence. The default is that the schedule does not recur: one Job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that Job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.
  - name: --required-slots
    summary: |-
      The number of scheduling slots that the Task requires to run. The default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this property is not supported and must not be specified.
  - name: --start-window
    summary: |-
      The time interval, starting from the time at which the schedule indicates a Job should be created, within which a Job must be created. If a Job is not created within the startWindow interval, then the 'opportunity' is lost; no Job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the Job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.
  - name: --uses-task-dependencies
    summary: |-
      Whether Tasks in the Job can define dependencies on each other. The default is false. True if flag present.
- uid: az_batch_job-schedule_delete
  name: az batch job-schedule delete
  summary: |-
    Deletes a Job Schedule from the specified Account.
  description: |-
    When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they are still counted towards Account lifetime statistics.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/batch/_help.py
  syntax: >-
    az batch job-schedule delete --job-schedule-id
                                 [--account-endpoint]
                                 [--account-key]
                                 [--account-name]
                                 [--if-match]
                                 [--if-modified-since]
                                 [--if-none-match]
                                 [--if-unmodified-since]
                                 [--yes]
  requiredParameters:
  - isRequired: true
    name: --job-schedule-id
    summary: |-
      The ID of the Job Schedule to delete. Required.
  optionalParameters:
  - name: --account-endpoint
    summary: |-
      Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.
  - name: --account-key
    summary: |-
      Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.
  - name: --account-name
    summary: |-
      Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.
  - name: --if-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
  - name: --if-modified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  - name: --if-none-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
  - name: --if-unmodified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  - name: --yes -y
    defaultValue: "False"
    summary: |-
      Do not prompt for confirmation.
- uid: az_batch_job-schedule_disable
  name: az batch job-schedule disable
  summary: |-
    Disables a Job Schedule.
  description: |-
    No new Jobs will be created until the Job Schedule is enabled again.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/batch/_help.py
  syntax: >-
    az batch job-schedule disable --job-schedule-id
                                  [--account-endpoint]
                                  [--account-key]
                                  [--account-name]
                                  [--if-match]
                                  [--if-modified-since]
                                  [--if-none-match]
                                  [--if-unmodified-since]
  requiredParameters:
  - isRequired: true
    name: --job-schedule-id
    summary: |-
      The ID of the Job Schedule to disable. Required.
  optionalParameters:
  - name: --account-endpoint
    summary: |-
      Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.
  - name: --account-key
    summary: |-
      Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.
  - name: --account-name
    summary: |-
      Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.
  - name: --if-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
  - name: --if-modified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  - name: --if-none-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
  - name: --if-unmodified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
- uid: az_batch_job-schedule_enable
  name: az batch job-schedule enable
  summary: |-
    Enables a Job Schedule.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/batch/_help.py
  syntax: >-
    az batch job-schedule enable --job-schedule-id
                                 [--account-endpoint]
                                 [--account-key]
                                 [--account-name]
                                 [--if-match]
                                 [--if-modified-since]
                                 [--if-none-match]
                                 [--if-unmodified-since]
  requiredParameters:
  - isRequired: true
    name: --job-schedule-id
    summary: |-
      The ID of the Job Schedule to enable. Required.
  optionalParameters:
  - name: --account-endpoint
    summary: |-
      Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.
  - name: --account-key
    summary: |-
      Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.
  - name: --account-name
    summary: |-
      Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.
  - name: --if-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
  - name: --if-modified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  - name: --if-none-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
  - name: --if-unmodified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
- uid: az_batch_job-schedule_list
  name: az batch job-schedule list
  summary: |-
    Lists all of the Job Schedules in the specified Account.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/batch/_help.py
  syntax: >-
    az batch job-schedule list [--account-endpoint]
                               [--account-key]
                               [--account-name]
                               [--expand]
                               [--filter]
                               [--select]
  optionalParameters:
  - name: --account-endpoint
    summary: |-
      Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.
  - name: --account-key
    summary: |-
      Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.
  - name: --account-name
    summary: |-
      Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.
  - name: --expand
    summary: |-
      An OData $expand clause.
  - name: --filter
    summary: |-
      An OData $filter clause. For more information on constructing this filter,see https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch.
  - name: --select
    summary: |-
      An OData $select clause.
- uid: az_batch_job-schedule_reset
  name: az batch job-schedule reset
  summary: |-
    Reset the properties of a job schedule.  An updated job specification only applies to new jobs.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/batch/_help.py
  syntax: >-
    az batch job-schedule reset --job-schedule-id
                                [--account-endpoint]
                                [--account-key]
                                [--account-name]
                                [--allow-task-preemption]
                                [--do-not-run-after]
                                [--do-not-run-until]
                                [--if-match]
                                [--if-modified-since]
                                [--if-none-match]
                                [--if-unmodified-since]
                                [--job-manager-task-application-package-references]
                                [--job-manager-task-command-line]
                                [--job-manager-task-environment-settings]
                                [--job-manager-task-id]
                                [--job-manager-task-resource-files]
                                [--job-max-task-retry-count]
                                [--job-max-wall-clock-time]
                                [--job-metadata]
                                [--json-file]
                                [--max-parallel-tasks]
                                [--metadata]
                                [--on-all-tasks-complete]
                                [--pool-id]
                                [--priority]
                                [--recurrence-interval]
                                [--required-slots]
                                [--start-window]
                                [--uses-task-dependencies]
  requiredParameters:
  - isRequired: true
    name: --job-schedule-id
    summary: |-
      The ID of the Job Schedule to update. Required.
  optionalParameters:
  - name: --account-endpoint
    summary: |-
      Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.
  - name: --account-key
    summary: |-
      Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.
  - name: --account-name
    summary: |-
      Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.
  - name: --allow-task-preemption
    summary: |-
      Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's allowTaskPreemption after it has been created using the update job API. True if flag present.
  - name: --do-not-run-after
    summary: |-
      A time after which no Job will be created under this Job Schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active Job under this Job Schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it. Expected format is an ISO-8601 timestamp.
  - name: --do-not-run-until
    summary: |-
      The earliest time at which any Job may be created under this Job Schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create Jobs immediately. Expected format is an ISO-8601 timestamp.
  - name: --if-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
  - name: --if-modified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  - name: --if-none-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
  - name: --if-unmodified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  - name: --job-manager-task-application-package-references
    summary: |-
      A list of Application Packages that the Batch service will deploy to the Compute Node before running the command line.Application Packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced Application Package is already on the Compute Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Application Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails. Space-separated application IDs with optional version in 'id[#version]' format.
  - name: --job-manager-task-command-line
    summary: |-
      The command line of the Job Manager Task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables). Required.
  - name: --job-manager-task-environment-settings
    summary: |-
      A list of environment variable settings for the Job Manager Task. Space-separated values in 'key=value' format.
  - name: --job-manager-task-id
    summary: |-
      A string that uniquely identifies the Job Manager Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. Required.
  - name: --job-manager-task-resource-files
    summary: |-
      A list of files that the Batch service will download to the Compute Node before running the command line. Files listed under this element are located in the Task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=httpurl format.
  - name: --job-max-task-retry-count
    summary: |-
      The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1, the Batch service retries Tasks without limit. The default value is 0 (no retries).
  - name: --job-max-wall-clock-time
    summary: |-
      The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may run. Expected format is an ISO-8601 duration.
  - name: --job-metadata
    summary: |-
      A list of name-value pairs associated with each Job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.
  - name: --json-file
    summary: |-
      A file containing the job schedule specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Schedule Arguments' are ignored.
  - name: --max-parallel-tasks
    summary: |-
      The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job API.
  - name: --metadata
    summary: |-
      A list of name-value pairs associated with the schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.
  - name: --on-all-tasks-complete
    summary: |-
      The action the Batch service should take when all Tasks in a Job created under this schedule are in the completed state. Note that if a Job contains no Tasks, then all Tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic Job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete to terminatejob once you have finished adding Tasks. The default is noaction. Known values are: "noaction" and "terminatejob".
  - name: --pool-id
    summary: |-
      The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but not both.
  - name: --priority
    summary: |-
      The priority of Jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all Jobs under the Job Schedule. You can update a Job's priority after it has been created using by using the update Job API.
  - name: --recurrence-interval
    summary: |-
      The time interval between the start times of two successive Jobs under the Job Schedule. A Job Schedule can have at most one active Job under it at any given time. Because a Job Schedule can have at most one active Job under it at any given time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service will not create the new Job until the previous Job finishes. If the previous Job does not finish within the startWindow period of the new recurrenceInterval, then no new Job will be scheduled for that interval. For recurring Jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when Jobs are created, add Tasks to the Jobs and terminate the Jobs ready for the next recurrence. The default is that the schedule does not recur: one Job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that Job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.
  - name: --required-slots
    summary: |-
      The number of scheduling slots that the Task requires to run. The default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this property is not supported and must not be specified.
  - name: --start-window
    summary: |-
      The time interval, starting from the time at which the schedule indicates a Job should be created, within which a Job must be created. If a Job is not created within the startWindow interval, then the 'opportunity' is lost; no Job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the Job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.
  - name: --uses-task-dependencies
    summary: |-
      Whether Tasks in the Job can define dependencies on each other. The default is false. True if flag present.
- uid: az_batch_job-schedule_set
  name: az batch job-schedule set
  summary: |-
    Update the properties of a job schedule.
  description: |-
    You can independently update the schedule and the job specification, but any change to either of these entities will reset all properties in that entity.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/batch/_help.py
  syntax: >-
    az batch job-schedule set --job-schedule-id
                              [--account-endpoint]
                              [--account-key]
                              [--account-name]
                              [--allow-task-preemption]
                              [--do-not-run-after]
                              [--do-not-run-until]
                              [--if-match]
                              [--if-modified-since]
                              [--if-none-match]
                              [--if-unmodified-since]
                              [--job-manager-task-application-package-references]
                              [--job-manager-task-command-line]
                              [--job-manager-task-environment-settings]
                              [--job-manager-task-id]
                              [--job-manager-task-resource-files]
                              [--job-max-task-retry-count]
                              [--job-max-wall-clock-time]
                              [--job-metadata]
                              [--json-file]
                              [--max-parallel-tasks]
                              [--metadata]
                              [--on-all-tasks-complete]
                              [--pool-id]
                              [--priority]
                              [--recurrence-interval]
                              [--required-slots]
                              [--start-window]
                              [--uses-task-dependencies]
  requiredParameters:
  - isRequired: true
    name: --job-schedule-id
    summary: |-
      The ID of the Job Schedule to update. Required.
  optionalParameters:
  - name: --account-endpoint
    summary: |-
      Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.
  - name: --account-key
    summary: |-
      Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.
  - name: --account-name
    summary: |-
      Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.
  - name: --allow-task-preemption
    summary: |-
      Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's allowTaskPreemption after it has been created using the update job API. True if flag present.
  - name: --do-not-run-after
    summary: |-
      A time after which no Job will be created under this Job Schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active Job under this Job Schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it. Expected format is an ISO-8601 timestamp.
  - name: --do-not-run-until
    summary: |-
      The earliest time at which any Job may be created under this Job Schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create Jobs immediately. Expected format is an ISO-8601 timestamp.
  - name: --if-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
  - name: --if-modified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  - name: --if-none-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
  - name: --if-unmodified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  - name: --job-manager-task-application-package-references
    summary: |-
      A list of Application Packages that the Batch service will deploy to the Compute Node before running the command line.Application Packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced Application Package is already on the Compute Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Application Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails. Space-separated application IDs with optional version in 'id[#version]' format.
  - name: --job-manager-task-command-line
    summary: |-
      The command line of the Job Manager Task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables). Required.
  - name: --job-manager-task-environment-settings
    summary: |-
      A list of environment variable settings for the Job Manager Task. Space-separated values in 'key=value' format.
  - name: --job-manager-task-id
    summary: |-
      A string that uniquely identifies the Job Manager Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. Required.
  - name: --job-manager-task-resource-files
    summary: |-
      A list of files that the Batch service will download to the Compute Node before running the command line. Files listed under this element are located in the Task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=httpurl format.
  - name: --job-max-task-retry-count
    summary: |-
      The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1, the Batch service retries Tasks without limit. The default value is 0 (no retries).
  - name: --job-max-wall-clock-time
    summary: |-
      The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may run. Expected format is an ISO-8601 duration.
  - name: --job-metadata
    summary: |-
      A list of name-value pairs associated with each Job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.
  - name: --json-file
    summary: |-
      A file containing the job schedule specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Schedule Arguments' are ignored.
  - name: --max-parallel-tasks
    summary: |-
      The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job API.
  - name: --metadata
    summary: |-
      A list of name-value pairs associated with the Job Schedule as metadata. If you do not specify this element, existing metadata is left unchanged. Space-separated values in 'key=value' format.
  - name: --on-all-tasks-complete
    summary: |-
      The action the Batch service should take when all Tasks in a Job created under this schedule are in the completed state. Note that if a Job contains no Tasks, then all Tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic Job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete to terminatejob once you have finished adding Tasks. The default is noaction. Known values are: "noaction" and "terminatejob".
  - name: --pool-id
    summary: |-
      The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but not both.
  - name: --priority
    summary: |-
      The priority of Jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all Jobs under the Job Schedule. You can update a Job's priority after it has been created using by using the update Job API.
  - name: --recurrence-interval
    summary: |-
      The time interval between the start times of two successive Jobs under the Job Schedule. A Job Schedule can have at most one active Job under it at any given time. Because a Job Schedule can have at most one active Job under it at any given time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service will not create the new Job until the previous Job finishes. If the previous Job does not finish within the startWindow period of the new recurrenceInterval, then no new Job will be scheduled for that interval. For recurring Jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when Jobs are created, add Tasks to the Jobs and terminate the Jobs ready for the next recurrence. The default is that the schedule does not recur: one Job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that Job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.
  - name: --required-slots
    summary: |-
      The number of scheduling slots that the Task requires to run. The default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this property is not supported and must not be specified.
  - name: --start-window
    summary: |-
      The time interval, starting from the time at which the schedule indicates a Job should be created, within which a Job must be created. If a Job is not created within the startWindow interval, then the 'opportunity' is lost; no Job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the Job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.
  - name: --uses-task-dependencies
    summary: |-
      Whether Tasks in the Job can define dependencies on each other. The default is false. True if flag present.
- uid: az_batch_job-schedule_show
  name: az batch job-schedule show
  summary: |-
    Gets information about the specified Job Schedule.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/batch/_help.py
  syntax: >-
    az batch job-schedule show --job-schedule-id
                               [--account-endpoint]
                               [--account-key]
                               [--account-name]
                               [--expand]
                               [--if-match]
                               [--if-modified-since]
                               [--if-none-match]
                               [--if-unmodified-since]
                               [--select]
  requiredParameters:
  - isRequired: true
    name: --job-schedule-id
    summary: |-
      The ID of the Job Schedule to get. Required.
  optionalParameters:
  - name: --account-endpoint
    summary: |-
      Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.
  - name: --account-key
    summary: |-
      Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.
  - name: --account-name
    summary: |-
      Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.
  - name: --expand
    summary: |-
      An OData $expand clause.
  - name: --if-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
  - name: --if-modified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  - name: --if-none-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
  - name: --if-unmodified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  - name: --select
    summary: |-
      An OData $select clause.
- uid: az_batch_job-schedule_stop
  name: az batch job-schedule stop
  summary: |-
    Terminates a Job Schedule.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/batch/_help.py
  syntax: >-
    az batch job-schedule stop --job-schedule-id
                               [--account-endpoint]
                               [--account-key]
                               [--account-name]
                               [--if-match]
                               [--if-modified-since]
                               [--if-none-match]
                               [--if-unmodified-since]
  requiredParameters:
  - isRequired: true
    name: --job-schedule-id
    summary: |-
      The ID of the Job Schedule to terminates. Required.
  optionalParameters:
  - name: --account-endpoint
    summary: |-
      Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.
  - name: --account-key
    summary: |-
      Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.
  - name: --account-name
    summary: |-
      Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.
  - name: --if-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
  - name: --if-modified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
  - name: --if-none-match
    summary: |-
      An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
  - name: --if-unmodified-since
    summary: |-
      A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
commands:
- az_batch_job-schedule_create
- az_batch_job-schedule_delete
- az_batch_job-schedule_disable
- az_batch_job-schedule_enable
- az_batch_job-schedule_list
- az_batch_job-schedule_reset
- az_batch_job-schedule_set
- az_batch_job-schedule_show
- az_batch_job-schedule_stop
globalParameters:
- name: --debug
  summary: |-
    Increase logging verbosity to show all debug logs.
- name: --help -h
  summary: |-
    Show this help message and exit.
- name: --only-show-errors
  summary: |-
    Only show errors, suppressing warnings.
- name: --output -o
  defaultValue: "json"
  parameterValueGroup: "json, jsonc, none, table, tsv, yaml, yamlc"
  summary: |-
    Output format.
- name: --query
  summary: |-
    JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
- name: --subscription
  summary: |-
    Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
- name: --verbose
  summary: |-
    Increase logging verbosity. Use --debug for full debug logs.
metadata:
  ms.date: 01/24/2025
  description: Manage Batch job schedules.
