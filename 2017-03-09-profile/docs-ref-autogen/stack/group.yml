### YamlMime:AzureCLIGroup
uid: az_stack_group
name: az stack group
summary: |-
  Manage Deployment Stacks at resource group.
status: GA
sourceType: Core
directCommands:
- uid: az_stack_group_create
  name: az stack group create
  summary: |-
    Create or update a deployment stack at resource group scope.
  status: GA
  sourceType: Core
  syntax: >-
    az stack group create --deny-settings-mode {denyDelete, denyWriteAndDelete, none}
                          --name
                          --resource-group
                          [--cs]
                          [--delete-all {false, true}]
                          [--delete-resource-groups {false, true}]
                          [--delete-resources {false, true}]
                          [--deny-settings-excluded-actions]
                          [--deny-settings-excluded-principals]
                          [--description]
                          [--no-wait]
                          [--parameters]
                          [--query-string]
                          [--tags]
                          [--template-file]
                          [--template-uri]
                          [--yes]
  examples:
  - summary: |-
      Create a deployment stack using template file and delete resources.
    syntax: az stack group create --name StackName --resource-group ResourceGroup --delete-resources --template-file simpleTemplate.json --description description --deny-settings-mode None
  - summary: |-
      Create a deployment stack with parameter file and delete resource groups.
    syntax: az stack group create --name StackName --resource-group ResourceGroup --delete-resource-groups --template-file simpleTemplate.json --parameters simpleTemplateParams.json --description description --deny-settings-mode None
  - summary: |-
      Create a deployment stack with template spec and delete all resources
    syntax: az stack group create --name StackName --resource-group ResourceGroup --delete-all --template-spec TemplateSpecResourceIDWithVersion --description description --deny-settings-mode None
  - summary: |-
      Create a deployment stack using bicep file.
    syntax: az stack group create --name StackName --resource-group ResourceGroup --template-file simple.bicep --description description --deny-settings-mode None
  - summary: |-
      Create a deployment stack at a different subscription
    syntax: az stack group create --name StackName --resource-group ResourceGroup --template-file simpleTemplate.json --description description --subscription subscriptionId --deny-settings-mode None
  - summary: |-
      Create a deployment stack using parameters from key/value pairs
    syntax: az stack group create --name StackName --template-file simpleTemplate.json --resource-group ResourceGroup --description description --parameters simpleTemplateParams.json value1=foo value2=bar --deny-settings-mode None
  - summary: |-
      Create a deployment stack from a local template, using a parameter file, a remote parameter file, and selectively overriding key/value pairs.
    syntax: az stack group create --name StackName --template-file azuredeploy.json --parameters @params.json --parameters https://mysite/params.json --parameters MyValue=This MyArray=@array.json --resource-group ResourceGroup --deny-settings-mode None
  - summary: |-
      Create a deployment stack from a local template, using deny settings.
    syntax: az stack group create --name StackName --resource-group ResourceGroup --template-file azuredeploy.json --deny-settings-mode denyDelete --deny-settings-excluded-actions Microsoft.Compute/virtualMachines/write --deny-settings-excluded-principals "test1 test2" --deny-settings-mode None
  - summary: |-
      Create a deployment stack from a local template, apply deny setting to child scopes.
    syntax: az stack group create --name StackName --resource-group ResourceGroup --template-file azuredeploy.json --deny-settings-mode denyDelete --deny-settings-excluded-actions Microsoft.Compute/virtualMachines/write --deny-settings-apply-to-child-scopes
  requiredParameters:
  - isRequired: true
    name: --deny-settings-mode --dm
    parameterValueGroup: "denyDelete, denyWriteAndDelete, none"
    summary: |-
      Define which operations are denied on resources managed by the stack.
  - isRequired: true
    name: --name -n
    summary: |-
      The name of the deployment stack.
  - isRequired: true
    name: --resource-group -g
    summary: |-
      The resource group where the deployment stack will be created.
  optionalParameters:
  - name: --cs --deny-settings-apply-to-child-scopes
    defaultValue: "False"
    summary: |-
      DenySettings will be applied to child scopes.
  - name: --delete-all
    defaultValue: "False"
    parameterValueGroup: "false, true"
    summary: |-
      Flag to indicate delete rather than detach for the resources and resource groups.
  - name: --delete-resource-groups
    defaultValue: "False"
    parameterValueGroup: "false, true"
    summary: |-
      Flag to indicate delete rather than detach for the resource groups.
  - name: --delete-resources
    defaultValue: "False"
    parameterValueGroup: "false, true"
    summary: |-
      Flag to indicate delete rather than detach for the resources.
  - name: --deny-settings-excluded-actions --ea
    summary: |-
      List of role-based management operations that are excluded from the denySettings. Up to 200 actions are permitted.
  - name: --deny-settings-excluded-principals --ep
    summary: |-
      List of AAD principal IDs excluded from the lock. Up to 5 principals are permitted.
  - name: --description
    summary: |-
      The description of deployment stack.
  - name: --no-wait
    defaultValue: "False"
    summary: |-
      Do not wait for the long-running operation to finish.
  - name: --parameters -p
    summary: |-
      Parameters may be supplied from a file using the `@{path}` syntax, a JSON string, or as <KEY=VALUE> pairs. Parameters are evaluated in order, so when a value is assigned twice, the latter value will be used. It is recommended that you supply your parameters file first, and then override selectively using KEY=VALUE syntax.
  - name: --query-string -q
    summary: |-
      The query string (a SAS token) to be used with the template-uri in the case of linked templates.
  - name: --tags
    summary: |-
      Space-separated tags: key[=value] [key[=value] ...]. Use "" to clear existing tags.
  - name: --template-file -f
    summary: |-
      A path to a template file or Bicep file in the file system.
  - name: --template-uri -u
    summary: |-
      A uri to a remote template file.
  - name: --yes
    defaultValue: "False"
    summary: |-
      Do not prompt for confirmation.
- uid: az_stack_group_delete
  name: az stack group delete
  summary: |-
    Delete specified deployment stack from resource group scope.
  status: GA
  sourceType: Core
  syntax: >-
    az stack group delete [--delete-all {false, true}]
                          [--delete-resource-groups {false, true}]
                          [--delete-resources {false, true}]
                          [--id]
                          [--name]
                          [--resource-group]
                          [--yes]
  examples:
  - summary: |-
      Delete stack by name.
    syntax: az stack group delete --name StackName --resource-group ResourceGroup
  - summary: |-
      Delete stack by stack resource id.
    syntax: az stack group delete --id /subscriptions/111111111111/resourceGroups/ResourceGroup/providers/Microsoft.Resources/deploymentStacks/StackName
  optionalParameters:
  - name: --delete-all
    defaultValue: "False"
    parameterValueGroup: "false, true"
    summary: |-
      Flag to indicate delete rather than detach for the resources and resource groups.
  - name: --delete-resource-groups
    defaultValue: "False"
    parameterValueGroup: "false, true"
    summary: |-
      Flag to indicate delete rather than detach for the resource groups.
  - name: --delete-resources
    defaultValue: "False"
    parameterValueGroup: "false, true"
    summary: |-
      Flag to indicate delete rather than detach for the resources.
  - name: --id
    summary: |-
      The deployment stack resource id.
  - name: --name -n
    summary: |-
      The deployment stack name.
  - name: --resource-group -g
    summary: |-
      The resource group where the deployment stack exists.
  - name: --yes
    defaultValue: "False"
    summary: |-
      Do not prompt for confirmation.
- uid: az_stack_group_export
  name: az stack group export
  summary: |-
    Export the template used to create the deployment stack from resource group scope.
  status: GA
  sourceType: Core
  syntax: >-
    az stack group export [--id]
                          [--name]
                          [--resource-group]
  examples:
  - summary: |-
      Export template by name.
    syntax: az stack group export --name StackName --resource-group ResourceGroup
  - summary: |-
      Export template by stack resource id.
    syntax: az stack group export --id /subscriptions/111111111111/resourceGroups/ResourceGroup/providers/Microsoft.Resources/deploymentStacks/StackName
  optionalParameters:
  - name: --id
    summary: |-
      The deployment stack resource id.
  - name: --name -n
    summary: |-
      The deployment stack name.
  - name: --resource-group -g
    summary: |-
      The resource group where the deployment stack exists.
- uid: az_stack_group_list
  name: az stack group list
  summary: |-
    List all deployment stacks in resource group.
  status: GA
  sourceType: Core
  syntax: az stack group list --resource-group
  examples:
  - summary: |-
      List all stacks in resource group
    syntax: az stack group list --resource-group ResourceGroup
  requiredParameters:
  - isRequired: true
    name: --resource-group -g
    summary: |-
      The resource group where the deployment stack exists.
- uid: az_stack_group_show
  name: az stack group show
  summary: |-
    Get specified deployment stack from resource group scope.
  status: GA
  sourceType: Core
  syntax: >-
    az stack group show [--id]
                        [--name]
                        [--resource-group]
  examples:
  - summary: |-
      Get stack by name.
    syntax: az stack group show --name StackName --resource-group ResourceGroup
  - summary: |-
      Get stack by stack resource id.
    syntax: az stack group show --id /subscriptions/111111111111/resourceGroups/ResourceGroup/providers/Microsoft.Resources/deploymentStacks/StackName
  optionalParameters:
  - name: --id
    summary: |-
      The deployment stack resource id.
  - name: --name -n
    summary: |-
      The deployment stack name.
  - name: --resource-group -g
    summary: |-
      The resource group where the deployment stack exists.
commands:
- az_stack_group_create
- az_stack_group_delete
- az_stack_group_export
- az_stack_group_list
- az_stack_group_show
globalParameters:
- name: --debug
  summary: |-
    Increase logging verbosity to show all debug logs.
- name: --help -h
  summary: |-
    Show this help message and exit.
- name: --only-show-errors
  summary: |-
    Only show errors, suppressing warnings.
- name: --output -o
  defaultValue: "json"
  parameterValueGroup: "json, jsonc, none, table, tsv, yaml, yamlc"
  summary: |-
    Output format.
- name: --query
  summary: |-
    JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
- name: --subscription
  summary: |-
    Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
- name: --verbose
  summary: |-
    Increase logging verbosity. Use --debug for full debug logs.
metadata:
  description: Manage Deployment Stacks at resource group.
