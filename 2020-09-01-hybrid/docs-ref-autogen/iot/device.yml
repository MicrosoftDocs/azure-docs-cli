### YamlMime:AzureCLIGroup
uid: az_iot_device
name: az iot device
extensionInformation: >-
  > [!NOTE]

  > This reference is part of the **azure-iot** extension for the Azure CLI (version 2.37.0 or higher). The extension will automatically install the first time you run an **az iot device** command. [Learn more](https://learn.microsoft.com/cli/azure/azure-cli-extensions-overview) about extensions.
summary: |-
  Leverage device simulation and other device-centric operations such as device-to-cloud or cloud-to-device messaging capabilities.
status: GA
sourceType: Extension
directCommands:
- uid: az_iot_device_send-d2c-message
  name: az iot device send-d2c-message
  summary: |-
    Send an mqtt device-to-cloud message.
  description: |-
    The command supports sending messages with custom payload in unicode
    string or binary format. When intending to send binary, the data should
    come from a file (via `--data-file-path`) and content type should be set
    to `application/octet-stream`.

    Note: The command only works for symmetric key auth (SAS) based devices.
    To enable querying on a message body in message routing, the contentType
    system property must be application/JSON and the contentEncoding system
    property must be one of the UTF encoding values supported by that system
    property(UTF-8, UTF-16 or UTF-32). If the content encoding isn't set when
    Azure Storage is used as routing endpoint, then IoT Hub writes the messages
    in base 64 encoded format. If using x509 authentication methods, the
    certificate and key files (and passphrase if needed) must be provided.
  status: GA
  sourceType: Extension
  syntax: >-
    az iot device send-d2c-message --device-id
                                   [--certificate-file-path]
                                   [--da]
                                   [--data-file-path]
                                   [--dtmi]
                                   [--hub-name]
                                   [--key]
                                   [--key-file-path]
                                   [--login]
                                   [--mc]
                                   [--pass]
                                   [--properties]
                                   [--resource-group]
  examples:
  - summary: |-
      Basic usage
    syntax: az iot device send-d2c-message -n {iothub_name} -d {device_id}
  - summary: |-
      Basic usage for device registering the model Id of 'dtmi:com:example:Thermostat;1' upon connection
    syntax: az iot device send-d2c-message -n {iothub_name} -d {device_id} --model-id 'dtmi:com:example:Thermostat;1'
  - summary: |-
      Basic usage for device with x509 authentication
    syntax: az iot device send-d2c-message -n {iothub_name} -d {device_id} --cp {certificate_file_path} --kp {key_file_path}
  - summary: |-
      Basic usage for device with x509 authentication in which the key file has a passphrase
    syntax: az iot device send-d2c-message -n {iothub_name} -d {device_id} --cp {certificate_file_path} --kp {key_file_path} --pass {passphrase}
  - summary: |-
      Basic usage with custom data
    syntax: az iot device send-d2c-message -n {iothub_name} -d {device_id} --data {message_body}
  - summary: |-
      Send application properties
    syntax: az iot device send-d2c-message -n {iothub_name} -d {device_id} --props 'key0=value0;key1=value1'
  - summary: |-
      Send system properties (Message Id and Correlation Id)
    syntax: az iot device send-d2c-message -n {iothub_name} -d {device_id} --props '$.mid=<id>;$.cid=<id>'
  - summary: |-
      Send custom data by specifying content-type and content-encoding in system properties
    syntax: az iot device send-d2c-message -n {iothub_name} -d {device_id} --props '$.ct=<content-type>;$.ce=<content-encoding>' --data {message_body}
  - summary: |-
      Send custom data in binary format by specifying content-encoding in system properties
    syntax: az iot device send-d2c-message -n {iothub_name} -d {device_id} --props '$.ct=application/octet-stream' --data-file-path {file_path}
  - summary: |-
      Send custom data in JSON format by specifying content-type and content-encoding in system properties
    syntax: az iot device send-d2c-message -n {iothub_name} -d {device_id} --props '$.ct=application/json;$.ce=utf-8' --data-file-path {file_path}
  requiredParameters:
  - isRequired: true
    name: --device-id -d
    summary: |-
      Target Device Id.
  optionalParameters:
  - name: --certificate-file-path --cp
    summary: |-
      Path to certificate file.
  - name: --da --data
    defaultValue: "Ping from Az CLI IoT Extension"
    summary: |-
      Message body. Provide text or raw json.
  - name: --data-file-path --dfp
    summary: |-
      Provide path to file for message body payload. Please note when the payload needs to be sent in binary format, set the content type to application/octet-stream.
    isPreview: true
  - name: --dtmi --model-id
    summary: |-
      The Digital Twin Model Id the device will report when connecting to the hub. See https://docs.microsoft.com/en-us/azure/iot-develop/overview-iot-plug-and-play for more details.
  - name: --hub-name -n
    summary: |-
      IoT Hub name or hostname. Required if --login is not provided.
  - name: --key --symmetric-key
    summary: |-
      Symmetric key to use for the device. If the symmetric key and other device authentication arguments are provided, symmetric key takes priority.
  - name: --key-file-path --kp
    summary: |-
      Path to key file.
  - name: --login -l
    summary: |-
      This command supports an entity connection string with rights to perform action. Use to avoid session login via "az login". If both an entity connection string and name are provided the connection string takes priority. Required if --hub-name is not provided.
  - name: --mc --msg-count
    defaultValue: "1"
    summary: |-
      Number of device messages to send to IoT Hub.
  - name: --pass --passphrase
    summary: |-
      Passphrase for key file.
  - name: --properties --props -p
    summary: |-
      Message property bag in key-value pairs with the following format: a=b;c=d. For mqtt messaging - you are able to send system properties using $.<name>=value. For instance $.cid=12345 sets the system correlation Id property. Other system property identifier examples include $.ct for content type, $.mid for message Id and $.ce for content encoding.
  - name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
- uid: az_iot_device_simulate
  name: az iot device simulate
  summary: |-
    Simulate a device in an Azure IoT Hub.
  description: |-
    While the device simulation is running, the device will automatically receive
    and acknowledge cloud-to-device (c2d) messages. For mqtt simulation, all c2d messages will
    be acknowledged with completion. For http simulation c2d acknowledgement is based on user
    selection which can be complete, reject or abandon. The mqtt simulation also supports direct
    method invocation which can be acknowledged by a response status code and response payload.
    Note: The command by default will set content-type to application/json and content-encoding
    to utf-8. This can be overriden.
    Note: If using x509 authentication methods, the certificate and key files (and passphrase if needed) must be provided.
  status: Experimental
  isExperimental: true
  previewOrExperimentalInfo: 'This command is experimental and under development. Reference and support levels: https://aka.ms/CLI_refstatus'
  sourceType: Extension
  syntax: >-
    az iot device simulate --device-id
                           [--certificate-file-path]
                           [--da]
                           [--dtmi]
                           [--hub-name]
                           [--init-reported-properties]
                           [--key]
                           [--key-file-path]
                           [--login]
                           [--mc]
                           [--method-response-code]
                           [--method-response-payload]
                           [--mi]
                           [--pass]
                           [--properties]
                           [--proto {http, mqtt}]
                           [--receive-settle {abandon, complete, reject}]
                           [--resource-group]
  examples:
  - summary: |-
      Basic usage (mqtt)
    syntax: az iot device simulate -n {iothub_name} -d {device_id}
  - summary: |-
      Basic usage for device registering the model Id of 'dtmi:com:example:Thermostat;1' upon connection (mqtt)
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --model-id 'dtmi:com:example:Thermostat;1'
  - summary: |-
      Basic usage for device with x509 authentication (mqtt)
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --cp {certificate_file_path} --kp {key_file_path}
  - summary: |-
      Basic usage for device with x509 authentication (mqtt) in which the key file has a passphrase
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --cp {certificate_file_path} --kp {key_file_path} --pass {passphrase}
  - summary: |-
      Send mixed properties (mqtt)
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --properties "myprop=myvalue;$.ct=application/json"
  - summary: |-
      Send direct method response status code and direct method response payload as raw json (mqtt only)
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --method-response-code 201 --method-response-payload '{"result":"Direct method successful"}'
  - summary: |-
      Send direct method response status code and direct method response payload as path to local file (mqtt only)
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --method-response-code 201 --method-response-payload '../my_direct_method_payload.json'
  - summary: |-
      Send the initial state of device twin reported properties as raw json for the target device (mqtt only)
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --init-reported-properties '{"reported_prop_1":"val_1", "reported_prop_2":val_2}'
  - summary: |-
      Send the initial state of device twin reported properties as path to local file for the target device (mqtt only)
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --init-reported-properties '../my_device_twin_reported_properties.json'
  - summary: |-
      Basic usage (http)
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --protocol http
  - summary: |-
      Send mixed properties (http)
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --protocol http --properties "iothub-app-myprop=myvalue;content-type=application/json;iothub-correlationid=12345"
  - summary: |-
      Choose total message count and interval between messages
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --msg-count 1000 --msg-interval 5
  - summary: |-
      Reject c2d messages (http only)
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --rs reject --protocol http
  - summary: |-
      Abandon c2d messages (http only)
    syntax: az iot device simulate -n {iothub_name} -d {device_id} --rs abandon --protocol http
  requiredParameters:
  - isRequired: true
    name: --device-id -d
    summary: |-
      Target Device Id.
  optionalParameters:
  - name: --certificate-file-path --cp
    summary: |-
      Path to certificate file.
  - name: --da --data
    defaultValue: "Ping from Az CLI IoT Extension"
    summary: |-
      Message body. Provide text or raw json.
  - name: --dtmi --model-id
    summary: |-
      The Digital Twin Model Id the device will report when connecting to the hub. See https://docs.microsoft.com/en-us/azure/iot-develop/overview-iot-plug-and-play for more details.
  - name: --hub-name -n
    summary: |-
      IoT Hub name or hostname. Required if --login is not provided.
  - name: --init-reported-properties --irp
    summary: |-
      Initial state of twin reported properties for the target device when the simulator is run. Optional param, only supported for mqtt.
  - name: --key --symmetric-key
    summary: |-
      Symmetric key to use for the device. If the symmetric key and other device authentication arguments are provided, symmetric key takes priority.
  - name: --key-file-path --kp
    summary: |-
      Path to key file.
  - name: --login -l
    summary: |-
      This command supports an entity connection string with rights to perform action. Use to avoid session login via "az login". If both an entity connection string and name are provided the connection string takes priority. Required if --hub-name is not provided.
  - name: --mc --msg-count
    defaultValue: "100"
    summary: |-
      Number of device messages to send to IoT Hub.
  - name: --method-response-code --mrc
    summary: |-
      Status code to be returned when direct method is executed on device. Optional param, only supported for mqtt.
  - name: --method-response-payload --mrp
    summary: |-
      Payload to be returned when direct method is executed on device. Provide file path or raw json. Optional param, only supported for mqtt.
  - name: --mi --msg-interval
    defaultValue: "3"
    summary: |-
      Delay in seconds between device-to-cloud messages.
  - name: --pass --passphrase
    summary: |-
      Passphrase for key file.
  - name: --properties --props -p
    summary: |-
      Message property bag in key-value pairs with the following format: a=b;c=d. For mqtt messaging - you are able to send system properties using $.<name>=value. For instance $.cid=12345 sets the system correlation Id property. Other system property identifier examples include $.ct for content type, $.mid for message Id and $.ce for content encoding.  For http messaging - application properties are sent using iothub-app-<name>=value, for instance iothub-app-myprop=myvalue. System properties are generally prefixed with iothub-<name> like iothub-correlationid but there are exceptions such as content-type and content-encoding.
  - name: --proto --protocol
    defaultValue: "mqtt"
    parameterValueGroup: "http, mqtt"
    summary: |-
      Indicates device-to-cloud message protocol.
  - name: --receive-settle --rs
    defaultValue: "complete"
    parameterValueGroup: "abandon, complete, reject"
    summary: |-
      Indicates how to settle received cloud-to-device messages. Supported with HTTP only.
  - name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
- uid: az_iot_device_upload-file
  name: az iot device upload-file
  summary: |-
    Upload a local file as a device to a pre-configured blob storage container.
  status: GA
  sourceType: Extension
  syntax: >-
    az iot device upload-file --content-type
                              --device-id
                              --file-path
                              [--hub-name]
                              [--login]
                              [--resource-group]
  requiredParameters:
  - isRequired: true
    name: --content-type --ct
    summary: |-
      MIME Type of file.
  - isRequired: true
    name: --device-id -d
    summary: |-
      Target Device Id.
  - isRequired: true
    name: --file-path --fp
    summary: |-
      Path to file for upload.
  optionalParameters:
  - name: --hub-name -n
    summary: |-
      IoT Hub name or hostname. Required if --login is not provided.
  - name: --login -l
    summary: |-
      This command supports an entity connection string with rights to perform action. Use to avoid session login via "az login". If both an entity connection string and name are provided the connection string takes priority. Required if --hub-name is not provided.
  - name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
commands:
- az_iot_device_c2d-message
- az_iot_device_c2d-message_abandon
- az_iot_device_c2d-message_complete
- az_iot_device_c2d-message_purge
- az_iot_device_c2d-message_receive
- az_iot_device_c2d-message_reject
- az_iot_device_c2d-message_send
- az_iot_device_registration
- az_iot_device_registration_create
- az_iot_device_send-d2c-message
- az_iot_device_simulate
- az_iot_device_upload-file
globalParameters:
- name: --debug
  summary: |-
    Increase logging verbosity to show all debug logs.
- name: --help -h
  summary: |-
    Show this help message and exit.
- name: --only-show-errors
  summary: |-
    Only show errors, suppressing warnings.
- name: --output -o
  defaultValue: "json"
  parameterValueGroup: "json, jsonc, none, table, tsv, yaml, yamlc"
  summary: |-
    Output format.
- name: --query
  summary: |-
    JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
- name: --subscription
  summary: |-
    Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
- name: --verbose
  summary: |-
    Increase logging verbosity. Use --debug for full debug logs.
metadata:
  description: Leverage device simulation and other device-centric operations such as device-to-cloud or cloud-to-device messaging capabilities.
