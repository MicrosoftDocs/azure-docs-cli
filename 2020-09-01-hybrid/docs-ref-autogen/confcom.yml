### YamlMime:AzureCLIGroup
uid: az_confcom
name: az confcom
extensionInformation: >-
  > [!NOTE]

  > This reference is part of the **confcom** extension for the Azure CLI (version 2.26.2 or higher). The extension will automatically install the first time you run an **az confcom** command. [Learn more](https://learn.microsoft.com/cli/azure/azure-cli-extensions-overview) about extensions.
summary: |-
  Commands to generate security policies for confidential containers in Azure.
status: GA
sourceType: Extension
directCommands:
- uid: az_confcom_acipolicygen
  name: az confcom acipolicygen
  summary: |-
    Create a Confidential Container Security Policy for ACI.
  status: GA
  sourceType: Extension
  syntax: >-
    az confcom acipolicygen [--approve-wildcards]
                            [--debug-mode]
                            [--diff]
                            [--disable-stdio]
                            [--image]
                            [--infrastructure-svn]
                            [--input]
                            [--outraw]
                            [--outraw-pretty-print]
                            [--parameters]
                            [--print-existing-policy]
                            [--print-policy]
                            [--save-to-file]
                            [--tar]
                            [--template-file]
                            [--validate-sidecar]
  examples:
  - summary: |-
      Input an ARM Template file to inject a base64 encoded Confidential Container Security Policy into the ARM Template
    syntax: az confcom acipolicygen --template-file "./template.json"
  - summary: |-
      Input an ARM Template file to create a human-readable Confidential Container Security Policy
    syntax: az confcom acipolicygen --template-file "./template.json" --outraw-pretty-print
  - summary: |-
      Input an ARM Template file to save a Confidential Container Security Policy to a file as base64 encoded text
    syntax: az confcom acipolicygen --template-file "./template.json" -s "./output-file.txt" --print-policy
  - summary: |-
      Input an ARM Template file and use a tar file as the image source instead of the Docker daemon
    syntax: az confcom acipolicygen --template-file "./template.json" --tar "./image.tar"
  optionalParameters:
  - name: --approve-wildcards -y
    defaultValue: "False"
    summary: |-
      When enabled, all prompts for using wildcards in environment variables are automatically approved.
  - name: --debug-mode
    defaultValue: "False"
    summary: |-
      When enabled, the generated security policy adds the ability to use /bin/sh or /bin/bash to debug the container. It also enabled stdio access, ability to dump stack traces, and enables runtime logging. It is recommended to only use this option for debugging purposes.
  - name: --diff -d
    defaultValue: "False"
    summary: |-
      When combined with an input ARM Template, verifies the policy present in the ARM Template under "ccePolicy" and the containers within the ARM Template are compatible. If they are incompatible, a list of reasons is given and the exit status code will be 2.
  - name: --disable-stdio
    defaultValue: "False"
    summary: |-
      When enabled, the containers in the container group do not have access to stdio.
  - name: --image
    summary: |-
      Input image name.
  - name: --infrastructure-svn
    summary: |-
      Minimum Allowed Software Version Number for Infrastructure Fragment.
  - name: --input -i
    summary: |-
      Input JSON config file.
  - name: --outraw
    defaultValue: "False"
    summary: |-
      Output policy in clear text compact JSON instead of default base64 format.
  - name: --outraw-pretty-print
    defaultValue: "False"
    summary: |-
      Output policy in clear text and pretty print format.
  - name: --parameters -p
    summary: |-
      Input parameters file to optionally accompany an ARM Template.
  - name: --print-existing-policy
    defaultValue: "False"
    summary: |-
      When enabled, the existing security policy that is present in the ARM Template is printed to the command line, and no new security policy is generated.
  - name: --print-policy
    defaultValue: "False"
    summary: |-
      When enabled, the generated security policy is printed to the command line instead of injected into the input ARM Template.
  - name: --save-to-file -s
    summary: |-
      Save output policy to given file path.
  - name: --tar
    summary: |-
      Path to either a tarball containing image layers or a JSON file containing paths to tarballs of image layers.
  - name: --template-file -a
    summary: |-
      Input ARM Template file.
  - name: --validate-sidecar -v
    defaultValue: "False"
    summary: |-
      Validate that the image used to generate the CCE Policy for a sidecar container will be allowed by its generated policy.
- uid: az_confcom_katapolicygen
  name: az confcom katapolicygen
  summary: |-
    Create a Confidential Container Security Policy for AKS.
  status: GA
  sourceType: Extension
  syntax: >-
    az confcom katapolicygen --yaml
                             [--config-map-file]
                             [--outraw]
                             [--print-policy]
                             [--settings-file-name]
                             [--use-cached-files]
  examples:
  - summary: |-
      Input a Kubernetes YAML file to inject a base64 encoded Confidential Container Security Policy into the YAML file
    syntax: az confcom katapolicygen --yaml "./pod.json"
  - summary: |-
      Input a Kubernetes YAML file to print a base64 encoded Confidential Container Security Policy to stdout
    syntax: az confcom katapolicygen --yaml "./pod.json" --print-policy
  - summary: |-
      Input a Kubernetes YAML file and custom settings file to inject a base64 encoded Confidential Container Security Policy into the YAML file
    syntax: az confcom katapolicygen --yaml "./pod.json" -j "./settings.json"
  - summary: |-
      Input a Kubernetes YAML file and external config map file
    syntax: az confcom katapolicygen --yaml "./pod.json" --config-map-file "./configmap.json"
  requiredParameters:
  - isRequired: true
    name: --yaml -y
    summary: |-
      Input YAML Kubernetes file.
  optionalParameters:
  - name: --config-map-file -c
    summary: |-
      Path to config map file.
  - name: --outraw
    defaultValue: "False"
    summary: |-
      Output policy in clear text compact JSON instead of default base64 format.
  - name: --print-policy
    defaultValue: "False"
    summary: |-
      Print the base64 encoded generated policy in the terminal.
  - name: --settings-file-name -j
    summary: |-
      Path to custom settings file.
  - name: --use-cached-files -u
    defaultValue: "False"
    summary: |-
      Use cached files to save on computation time.
commands:
- az_confcom_acipolicygen
- az_confcom_katapolicygen
globalParameters:
- name: --debug
  summary: |-
    Increase logging verbosity to show all debug logs.
- name: --help -h
  summary: |-
    Show this help message and exit.
- name: --only-show-errors
  summary: |-
    Only show errors, suppressing warnings.
- name: --output -o
  defaultValue: "json"
  parameterValueGroup: "json, jsonc, none, table, tsv, yaml, yamlc"
  summary: |-
    Output format.
- name: --query
  summary: |-
    JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
- name: --subscription
  summary: |-
    Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
- name: --verbose
  summary: |-
    Increase logging verbosity. Use --debug for full debug logs.
metadata:
  description: Commands to generate security policies for confidential containers in Azure.
