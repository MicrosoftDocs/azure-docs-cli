### YamlMime:AzureCLIGroup
uid: az_vm_extension
name: az vm extension
summary: |-
  Manage extensions on VMs.
description: |-
  Extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. For example, if a virtual machine requires software installation, anti-virus protection, or Docker configuration, a VM extension can be used to complete these tasks. Extensions can be bundled with a new virtual machine deployment or run against any existing system.
status: GA
sourceType: Core
directCommands:
- uid: az_vm_extension_delete
  name: az vm extension delete
  summary: |-
    Delete operation to delete the extension.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/vm/_help.py
  syntax: >-
    az vm extension delete [--ids]
                           [--name]
                           [--no-wait {0, 1, f, false, n, no, t, true, y, yes}]
                           [--resource-group]
                           [--subscription]
                           [--vm-name]
  examples:
  - summary: |-
      Use a VM name and extension to delete an extension from a VM.
    syntax: az vm extension delete -g MyResourceGroup --vm-name MyVm -n MyExtensionName
  - summary: |-
      Delete extensions with IDs containing the string "MyExtension" from a VM.
    syntax: az vm extension delete --ids $(az resource list --query "[?contains(name, 'MyExtension')].id" -o tsv)
  optionalParameters:
  - name: --ids
    summary: |-
      One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments.
  - name: --name --vm-extension-name -n
    summary: |-
      The name of the virtual machine extension.
  - name: --no-wait
    parameterValueGroup: "0, 1, f, false, n, no, t, true, y, yes"
    summary: |-
      Do not wait for the long-running operation to finish.
  - name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
  - name: --subscription
    summary: |-
      Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
  - name: --vm-name
    summary: |-
      The name of the Virtual Machine. You can configure the default using `az configure --defaults vm=<name>`.
- uid: az_vm_extension_list
  name: az vm extension list
  summary: |-
    List the extensions attached to a VM.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/vm/_help.py
  syntax: >-
    az vm extension list [--ids]
                         [--resource-group]
                         [--subscription]
                         [--vm-name]
  examples:
  - summary: |-
      List attached extensions to a named VM.
    syntax: az vm extension list -g MyResourceGroup --vm-name MyVm
  optionalParameters:
  - name: --ids
    summary: |-
      One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments.
  - name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
  - name: --subscription
    summary: |-
      Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
  - name: --vm-name
    summary: |-
      The name of the Virtual Machine. You can configure the default using `az configure --defaults vm=<name>`.
- uid: az_vm_extension_set
  name: az vm extension set
  summary: |-
    Set extensions for a VM.
  description: |-
    Get extension details from `az vm extension image list`.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/vm/_help.py
  syntax: >-
    az vm extension set --name
                        --publisher
                        [--enable-auto-upgrade {false, true}]
                        [--extension-instance-name]
                        [--force-update]
                        [--ids]
                        [--no-auto-upgrade {false, true}]
                        [--no-auto-upgrade-minor-version {false, true}]
                        [--no-wait]
                        [--protected-settings]
                        [--resource-group]
                        [--settings]
                        [--subscription]
                        [--version]
                        [--vm-name]
  examples:
  - summary: |-
      Add a user account to a Linux VM.
    syntax: >-
      az vm extension set -n VMAccessForLinux --publisher Microsoft.OSTCExtensions --version 1.4 \
          --vm-name MyVm --resource-group MyResourceGroup \
          --protected-settings '{"username":"user1", "ssh_key":"ssh_rsa ..."}'
  - summary: |-
      Add a customScript extension to VM(s) specified by --ids.
    syntax: az vm extension set -n customScript --publisher Microsoft.Azure.Extensions --ids {vm_id}
  - summary: |-
      Add an extension and enable automatic upgrade by the platform if there is a newer version of the extension available.
    syntax: >-
      az vm extension set -n extName --publisher publisher --vm-name MyVM -g MyResourceGroup \

      --enable-auto-upgrade true
  requiredParameters:
  - isRequired: true
    name: --name -n
    summary: |-
      Name of the extension.
    valueFrom: az vm extension image list
  - isRequired: true
    name: --publisher
    summary: |-
      The name of the extension publisher.
  optionalParameters:
  - name: --enable-auto-upgrade
    parameterValueGroup: "false, true"
    summary: |-
      Indicate the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
  - name: --extension-instance-name
    summary: |-
      Name of extension instance, which can be customized. Default: name of the extension.
  - name: --force-update
    defaultValue: "False"
    summary: |-
      Force to update even if the extension configuration has not changed.
  - name: --ids
    summary: |-
      One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments.
  - name: --no-auto-upgrade
    defaultValue: "False"
    parameterValueGroup: "false, true"
    summary: |-
      If set, the extension service will not automatically pick or upgrade to the latest minor version, even if the extension is redeployed.
    isDeprecated: true
    deprecateInfo: Option '--no-auto-upgrade' has been deprecated and will be removed in a future release. Use '--no-auto-upgrade-minor-version' instead.
  - name: --no-auto-upgrade-minor-version
    defaultValue: "False"
    parameterValueGroup: "false, true"
    summary: |-
      If set, the extension service will not automatically pick or upgrade to the latest minor version, even if the extension is redeployed.
  - name: --no-wait
    defaultValue: "False"
    summary: |-
      Do not wait for the long-running operation to finish.
  - name: --protected-settings
    summary: |-
      Protected settings in JSON format for sensitive information like credentials. A JSON file path is also accepted.
  - name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
  - name: --settings
    summary: |-
      Extension settings in JSON format. A JSON file path is also accepted.
  - name: --subscription
    summary: |-
      Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
  - name: --version
    summary: |-
      The version of the extension. To pin extension version to this value, please specify --no-auto-upgrade-minor-version.
  - name: --vm-name
    summary: |-
      The name of the Virtual Machine. You can configure the default using `az configure --defaults vm=<name>`.
- uid: az_vm_extension_show
  name: az vm extension show
  summary: |-
    Display information about extensions attached to a VM.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/vm/_help.py
  syntax: >-
    az vm extension show [--ids]
                         [--instance-view]
                         [--name]
                         [--resource-group]
                         [--subscription]
                         [--vm-name]
  examples:
  - summary: |-
      Use VM name and extension name to show the extensions attached to a VM.
    syntax: az vm extension show -g MyResourceGroup --vm-name MyVm -n extension_name
  optionalParameters:
  - name: --ids
    summary: |-
      One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments.
  - name: --instance-view
    defaultValue: "False"
    summary: |-
      The instance view of a virtual machine extension.
  - name: --name -n
    summary: |-
      Name of the extension.
  - name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
  - name: --subscription
    summary: |-
      Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
  - name: --vm-name
    summary: |-
      The name of the Virtual Machine. You can configure the default using `az configure --defaults vm=<name>`.
- uid: az_vm_extension_wait
  name: az vm extension wait
  summary: |-
    Place the CLI in a waiting state until a condition of a virtual machine extension is met.
  status: GA
  sourceType: Core
  editLink: https://github.com/Azure/azure-cli/blob/dev/src/azure-cli/azure/cli/command_modules/vm/_help.py
  syntax: >-
    az vm extension wait [--created]
                         [--custom]
                         [--deleted]
                         [--exists]
                         [--ids]
                         [--interval]
                         [--name]
                         [--resource-group]
                         [--subscription]
                         [--timeout]
                         [--updated]
                         [--vm-name]
  examples:
  - summary: |-
      Place the CLI in a waiting state until a condition of a virtual machine extension is met. (autogenerated)
    syntax: az vm extension wait --created --name MyExtension --resource-group MyResourceGroup --vm-name MyVm
  - summary: |-
      Place the CLI in a waiting state until a condition of a virtual machine extension is met. (autogenerated)
    syntax: az vm extension wait --exists --name MyExtension --resource-group MyResourceGroup --vm-name MyVm
  - summary: |-
      Place the CLI in a waiting state until a condition of a virtual machine extension is met. (autogenerated)
    syntax: az vm extension wait --ids @- --name MyExtension --subscription MySubscription --updated --vm-name MyVm
  optionalParameters:
  - name: --created
    defaultValue: "False"
    summary: |-
      Wait until created with 'provisioningState' at 'Succeeded'.
  - name: --custom
    summary: |-
      Wait until the condition satisfies a custom JMESPath query. E.g. provisioningState!='InProgress', instanceView.statuses[?code=='PowerState/running'].
  - name: --deleted
    defaultValue: "False"
    summary: |-
      Wait until deleted.
  - name: --exists
    defaultValue: "False"
    summary: |-
      Wait until the resource exists.
  - name: --ids
    summary: |-
      One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments.
  - name: --interval
    defaultValue: "30"
    summary: |-
      Polling interval in seconds.
  - name: --name -n
    summary: |-
      Name of the extension.
  - name: --resource-group -g
    summary: |-
      Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
  - name: --subscription
    summary: |-
      Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
  - name: --timeout
    defaultValue: "3600"
    summary: |-
      Maximum wait in seconds.
  - name: --updated
    defaultValue: "False"
    summary: |-
      Wait until updated with provisioningState at 'Succeeded'.
  - name: --vm-name
    summary: |-
      The name of the Virtual Machine. You can configure the default using `az configure --defaults vm=<name>`.
commands:
- az_vm_extension_delete
- az_vm_extension_image
- az_vm_extension_image_list
- az_vm_extension_image_list-names
- az_vm_extension_image_list-versions
- az_vm_extension_image_show
- az_vm_extension_list
- az_vm_extension_set
- az_vm_extension_show
- az_vm_extension_wait
globalParameters:
- name: --debug
  summary: |-
    Increase logging verbosity to show all debug logs.
- name: --help -h
  summary: |-
    Show this help message and exit.
- name: --only-show-errors
  summary: |-
    Only show errors, suppressing warnings.
- name: --output -o
  defaultValue: "json"
  parameterValueGroup: "json, jsonc, none, table, tsv, yaml, yamlc"
  summary: |-
    Output format.
- name: --query
  summary: |-
    JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
- name: --subscription
  summary: |-
    Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
- name: --verbose
  summary: |-
    Increase logging verbosity. Use --debug for full debug logs.
metadata:
  ms.date: 08/28/2023
  description: Extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. For example, if a virtual machine requires software installation, anti-virus protection, or Docker configuration, a VM extension can be used to complete these tasks. Extensions can be bundled with a new virtual machine deployment or run against any existing system.
