### YamlMime:AzureCLIGroup
uid: az_sql_mi-arc_config
name: az sql mi-arc config
extensionInformation: >-
  > [!Note]

  > This reference is part of the **arcdata** extension for Azure CLI and requires version 2.3.1 or higher.  The extension will automatically install the first time you run an **az sql mi-arc config** command.  [Learn more](https://docs.microsoft.com/en-us/cli/azure/azure-cli-extensions-overview) about extensions.
summary: Configuration commands.
description: ''
directCommands:
- uid: az_sql_mi-arc_config_add
  name: az sql mi-arc config add
  summary: Add a value for a json path in a config file.
  description: Adds the value at the json path in the config file.  All examples below are given in Bash.  If using another command line, please be aware that you may need to escapequotations appropriately.  Alternatively, you may use the patch file functionality.
  syntax: >-
    az sql mi-arc config add --json-values
                             --path
  examples:
  - summary: Ex 1 - Add storage.
    syntax: az sql mi-arc config add --path custom/spec.json --json-values 'spec.storage={"accessMode":"ReadWriteOnce","className":"managed-premium","size":"10Gi"}'
  requiredParameters:
  - isRequired: true
    name: --json-values -j
    summary: "A key value pair list of json paths to values: key1.subkey1=value1,key2.subkey2=value2. You may provide inline json values such as: key='{\"kind\":\"cluster\",\"name\":\"test-cluster\"}' or provide a file path, such as key=./values.json. Add does NOT support conditionals.  If the inline value you are providing is a key value pair itself with \"=\" and \",\" please escape those characters.  For example, key1=\"key2=val2,key3=val3\". Please see http://jsonpatch.com/ for examples of how your path should look.  If you would like to access an array, you must do so by indicating the index, such as key.0=value."
    description: ''
  - isRequired: true
    name: --path -p
    summary: Path to the custom resource specification, i.e. custom/spec.json.
    description: ''
- uid: az_sql_mi-arc_config_init
  name: az sql mi-arc config init
  summary: Initializes the CRD and specification files for a SQL managed instance.
  description: ''
  syntax: az sql mi-arc config init --path
  examples:
  - summary: Initializes the CRD and specification files for a SQL managed instance.
    syntax: az sql mi-arc config init --path ./template
  requiredParameters:
  - isRequired: true
    name: --path -p
    summary: A path where the CRD and specification for the SQL managed instance should be written.
    description: ''
- uid: az_sql_mi-arc_config_patch
  name: az sql mi-arc config patch
  summary: Patches a config file based on a json patch file.
  description: Patches the config file according to the given patch file. Please consult http://jsonpatch.com/ for a better understanding of how the paths should be composed. The replace operation can use conditionals in its path due to the jsonpath library https://jsonpath.com/. All patch json files must start with a key of "patch" that has an array of patches with their corresponding op (add, replace, remove), path, and value. The "remove" op does not require a value, just a path. Please see the examples below.
  syntax: >-
    az sql mi-arc config patch --patch-file
                               --path
  examples:
  - summary: Ex 1 - Replace the port of a single endpoint with patch file.
    syntax: >-
      az sql mi-arc config patch --path custom/spec.json --patch ./patch.json

          Patch File Example (patch.json):
              {"patch":[{"op":"replace","path":"$.spec.endpoints[?(@.name=='Controller')].port","value":30080}]}
  - summary: Ex 2 - Replace storage with patch file.
    syntax: >-
      az sql mi-arc config patch --path custom/spec.json --patch ./patch.json

          Patch File Example (patch.json):
              {"patch":[{"op":"replace","path":".spec.storage","value":{"accessMode":"ReadWriteMany","className":"managed-premium","size":"10Gi"}}]}
  requiredParameters:
  - isRequired: true
    name: --patch-file
    summary: 'Path to a patch json file that is based off the jsonpatch library: http://jsonpatch.com/. You must start your patch json file with a key called "patch", whose value is an array of patch operations you intend to make. For the path of a patch operation, you may use dot notation, such as key1.key2 for most operations. If you would like to do a replace operation, and you are replacing a value in an array that requires a conditional, please use the jsonpath notation by beginning your path with a $. This will allow you to do a conditional such as $.key1.key2[?(@.key3=="someValue"].key4. Please see the examples below. For additional help with conditionals, please see: https://jsonpath.com/.'
    description: ''
  - isRequired: true
    name: --path -p
    summary: Path to the custom resource specification, i.e. custom/spec.json.
    description: ''
- uid: az_sql_mi-arc_config_remove
  name: az sql mi-arc config remove
  summary: Remove a value for a json path in a config file.
  description: Removes the value at the json path in the config file.  All examples below are given in Bash.  If using another command line, please be aware that you may need to escapequotations appropriately.  Alternatively, you may use the patch file functionality.
  syntax: >-
    az sql mi-arc config remove --json-path
                                --path
  examples:
  - summary: Ex 1 - Remove storage.
    syntax: az sql mi-arc config remove --path custom/spec.json --json-path '.spec.storage'
  requiredParameters:
  - isRequired: true
    name: --json-path -j
    summary: 'A list of json paths based on the jsonpatch library that indicates which values you would like removed, such as: key1.subkey1,key2.subkey2. Remove does NOT support conditionals. Please see http://jsonpatch.com/ for examples of how your path should look.  If you would like to access an array, you must do so by indicating the index, such as key.0=value.'
    description: ''
  - isRequired: true
    name: --path -p
    summary: Path to the custom resource specification, i.e. custom/spec.json.
    description: ''
- uid: az_sql_mi-arc_config_replace
  name: az sql mi-arc config replace
  summary: Replace a value for a json path in a config file.
  description: Replaces the value at the json path in the config file.  All examplesbelow are given in Bash.  If using another command line, please be aware that you may need to escapequotations appropriately.  Alternatively, you may use the patch file functionality.
  syntax: >-
    az sql mi-arc config replace --json-values
                                 --path
  examples:
  - summary: Ex 1 - Replace the port of a single endpoint.
    syntax: az sql mi-arc config replace --path custom/spec.json --json-values '$.spec.endpoints[?(@.name=="Controller")].port=30080'
  - summary: Ex 2 - Replace storage.
    syntax: az sql mi-arc config replace --path custom/spec.json --json-values 'spec.storage={"accessMode":"ReadWriteOnce","className":"managed-premium","size":"10Gi"}'
  requiredParameters:
  - isRequired: true
    name: --json-values -j
    summary: "A key value pair list of json paths to values: key1.subkey1=value1,key2.subkey2=value2. You may provide inline json values such as: key='{\"kind\":\"cluster\",\"name\":\"test-cluster\"}' or provide a file path, such as key=./values.json. Replace supports conditionals through the jsonpath library.  To use this, start your path with a $. This will allow you to do a conditional such as -j $.key1.key2[?(@.key3==\"someValue\"].key4=value. If the inline value you are providing is a key value pair itself with \"=\" and \",\" please escape those characters.  For example, key1=\"key2=val2,key3=val3\". You may see examples below. For additional help, please see: https://jsonpath.com/."
    description: ''
  - isRequired: true
    name: --path -p
    summary: Path to the custom resource specification, i.e. custom/spec.json.
    description: ''
commands:
- az_sql_mi-arc_config_add
- az_sql_mi-arc_config_init
- az_sql_mi-arc_config_patch
- az_sql_mi-arc_config_remove
- az_sql_mi-arc_config_replace
globalParameters:
- name: --debug
  summary: Increase logging verbosity to show all debug logs.
- name: --help -h
  summary: Show this help message and exit.
- name: --only-show-errors
  summary: Only show errors, suppressing warnings.
- name: --output -o
  defaultValue: json
  parameterValueGroup: json, jsonc, table, tsv
  summary: Output format.
- name: --query
  summary: JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
- name: --verbose
  summary: Increase logging verbosity. Use --debug for full debug logs.
metadata:
  description: Configuration commands.
