### YamlMime:AzureCLIGroup
uid: az_arcdata_dc_config
name: az arcdata dc config
extensionInformation: >-
  > [!NOTE]

  > This reference is part of the **arcdata** extension for the Azure CLI (version 2.3.1 or higher). The extension will automatically install the first time you run an **az arcdata dc config** command. [Learn more](https://learn.microsoft.com/cli/azure/azure-cli-extensions-overview) about extensions.
summary: |-
  Configuration commands.
status: GA
sourceType: Extension
directCommands:
- uid: az_arcdata_dc_config_add
  name: az arcdata dc config add
  summary: |-
    Add a value for a json path in a config file.
  description: |-
    Add the value at the json path in the config file. All examples below are given in Bash.  If using another command line, you may need to escapequotations appropriately.  Alternatively, you may use the patch file functionality.
  status: GA
  sourceType: Extension
  syntax: >-
    az arcdata dc config add --config-file
                             --json-values
                             --path
  examples:
  - summary: |-
      Add data controller storage.
    syntax: az arcdata dc config add --path custom/control.json --json-values 'spec.storage={"accessMode":"ReadWriteOnce","className":"managed-premium","size":"10Gi"}'
  requiredParameters:
  - isRequired: true
    name: --config-file -c
    summary: |-
      Data controller config file path of the config you would like to set, i.e. custom/control.json.
    isDeprecated: true
    deprecateInfo: Option '-c' has been deprecated and will be removed in a future release. Use '-p' instead.
  - isRequired: true
    name: --json-values -j
    summary: |-
      A key value pair list of json paths to values: key1.subkey1=value1,key2.subkey2=value2. You may provide inline json values such as: key='{"kind":"cluster","name":"test-cluster"}' or provide a file path, such as key=./values.json. The add command does NOT support conditionals.  If the inline value you are providing is a key value pair itself with "=" and "," escape those characters.  For example, key1="key2\=val2\,key3\=val3". See http://jsonpatch.com/ for examples of how your path should look.  If you would like to access an array, you must do so by indicating the index, such as key.0=value.
  - isRequired: true
    name: --path -p
    summary: |-
      Data controller config file path of the config you would like to set, i.e. custom/control.json.
- uid: az_arcdata_dc_config_init
  name: az arcdata dc config init
  summary: |-
    Initialize a data controller configuration profile that can be used with `az arcdata dc create`.
  description: |-
    Initialize a data controller configuration profile that can be used with `az arcdata dc create`. The specific source of the configuration profile can be specified in the arguments.
  status: GA
  sourceType: Extension
  syntax: >-
    az arcdata dc config init [--force]
                              [--path]
                              [--source]
                              [--target]
  examples:
  - summary: |-
      Guided data controller config init experience - you will receive prompts for needed values.
    syntax: az arcdata dc config init
  - summary: |-
      arcdata dc config init with arguments, creates a configuration profile of aks-dev-test in ./custom.
    syntax: az arcdata dc config init --source azure-arc-kubeadm --path custom
  optionalParameters:
  - name: --force -f
    summary: |-
      Force overwrite of the target file.
  - name: --path -p
    summary: |-
      File path of where you would like the config profile placed, defaults to <cwd>/custom.
  - name: --source -s
    summary: |-
      Config profile source: ['azure-arc-ake', 'azure-arc-aks-default-storage', 'azure-arc-aks-dev-test', 'azure-arc-aks-hci', 'azure-arc-aks-premium-storage', 'azure-arc-azure-openshift', 'azure-arc-eks', 'azure-arc-gke', 'azure-arc-kubeadm', 'azure-arc-kubeadm-dev-test', 'azure-arc-openshift', 'azure-arc-unit-test'].
  - name: --target -t
    summary: |-
      File path of where you would like the config profile placed, defaults to <cwd>/custom.
    isDeprecated: true
    deprecateInfo: Option '-t' has been deprecated and will be removed in a future release. Use '-p' instead.
- uid: az_arcdata_dc_config_list
  name: az arcdata dc config list
  summary: |-
    List available configuration profile choices.
  description: |-
    List available configuration profile choices for use in `arcdata dc config init`.
  status: GA
  sourceType: Extension
  syntax: az arcdata dc config list [--config-profile]
  examples:
  - summary: |-
      Shows all available configuration profile names.
    syntax: az arcdata dc config list
  - summary: |-
      Shows json of a specific configuration profile.
    syntax: az arcdata dc config list --config-profile aks-dev-test
  optionalParameters:
  - name: --config-profile -c
    summary: |-
      Default config profile: ['azure-arc-ake', 'azure-arc-aks-default-storage', 'azure-arc-aks-dev-test', 'azure-arc-aks-hci', 'azure-arc-aks-premium-storage', 'azure-arc-azure-openshift', 'azure-arc-eks', 'azure-arc-gke', 'azure-arc-kubeadm', 'azure-arc-kubeadm-dev-test', 'azure-arc-openshift', 'azure-arc-unit-test'].
- uid: az_arcdata_dc_config_patch
  name: az arcdata dc config patch
  summary: |-
    Patch a config file based on a json patch file.
  description: |-
    Patch the config file according to the given patch file. Consult http://jsonpatch.com/ for a better understanding of how the paths should be composed. The replace operation can use conditionals in its path due to the jsonpath library https://jsonpath.com/. All patch json files must start with a key of "patch" that has an array of patches with their corresponding op (add, replace, remove), path, and value. The "remove" op does not require a value, just a path. See the examples below.
  status: GA
  sourceType: Extension
  syntax: >-
    az arcdata dc config patch --config-file
                               --patch-file
                               --path
  examples:
  - summary: |-
      Ex 1 - Replace the port of a single endpoint (Data Controller Endpoint) with patch file.
    syntax: >-
      az arcdata dc config patch --path custom/control.json --patch ./patch.json

          Patch File Example (patch.json):
              {"patch":[{"op":"replace","path":"$.spec.endpoints[?(@.name=='Controller')].port","value":30080}]}
  - summary: |-
      Ex 2 - Replace data controller storage with patch file.
    syntax: >-
      az arcdata dc config patch --path custom/control.json --patch ./patch.json

          Patch File Example (patch.json):
              {"patch":[{"op":"replace","path":".spec.storage","value":{"accessMode":"ReadWriteMany","className":"managed-premium","size":"10Gi"}}]}
  requiredParameters:
  - isRequired: true
    name: --config-file -c
    summary: |-
      Data controller config file path of the config you would like to set, i.e. custom/control.json.
    isDeprecated: true
    deprecateInfo: Option '-c' has been deprecated and will be removed in a future release. Use '--path' instead.
  - isRequired: true
    name: --patch-file -p
    summary: |-
      Path to a patch json file that is based off the jsonpatch library: http://jsonpatch.com/. You must start your patch json file with a key called "patch", whose value is an array of patch operations you intend to make. For the path of a patch operation, you may use dot notation, such as key1.key2 for most operations. If you would like to do a replace operation, and you are replacing a value in an array that requires a conditional, please use the jsonpath notation by beginning your path with a $. This will allow you to do a conditional such as $.key1.key2[?(@.key3=="someValue"].key4. See the examples below. For additional help with conditionals, See: https://jsonpath.com/.
  - isRequired: true
    name: --path
    summary: |-
      Data controller config file path of the config you would like to set, i.e. custom/control.json.
- uid: az_arcdata_dc_config_remove
  name: az arcdata dc config remove
  summary: |-
    Remove a value for a json path in a config file.
  description: |-
    Remove the value at the json path in the config file.  All examples below are given in Bash.  If using another command line, you may need to escapequotations appropriately.  Alternatively, you may use the patch file functionality.
  status: GA
  sourceType: Extension
  syntax: >-
    az arcdata dc config remove --config-file
                                --json-path
                                --path
  examples:
  - summary: |-
      Ex 1 - Remove data controller storage.
    syntax: az arcdata dc config remove --path custom/control.json --json-path '.spec.storage'
  requiredParameters:
  - isRequired: true
    name: --config-file -c
    summary: |-
      Data controller config file path of the config you would like to set, i.e. custom/control.json.
    isDeprecated: true
    deprecateInfo: Option '-c' has been deprecated and will be removed in a future release. Use '-p' instead.
  - isRequired: true
    name: --json-path -j
    summary: |-
      A list of json paths based on the jsonpatch library that indicates which values you would like removed, such as: key1.subkey1,key2.subkey2. The remove command does NOT support conditionals. See http://jsonpatch.com/ for examples of how your path should look.  If you would like to access an array, you must do so by indicating the index, such as key.0=value.
  - isRequired: true
    name: --path -p
    summary: |-
      Data controller config file path of the config you would like to set, i.e. custom/control.json.
- uid: az_arcdata_dc_config_replace
  name: az arcdata dc config replace
  summary: |-
    Replace a value for a json path in a config file.
  description: |-
    Replace the value at the json path in the config file.  All examplesbelow are given in Bash.  If using another command line, you may need to escapequotations appropriately.  Alternatively, you may use the patch file functionality.
  status: GA
  sourceType: Extension
  syntax: >-
    az arcdata dc config replace --config-file
                                 --json-values
                                 --path
  examples:
  - summary: |-
      Ex 1 - Replace the port of a single endpoint (Data Controller Endpoint).
    syntax: az arcdata dc config replace --path custom/control.json --json-values '$.spec.endpoints[?(@.name=="Controller")].port=30080'
  - summary: |-
      Ex 2 - Replace data controller storage.
    syntax: az arcdata dc config replace --path custom/control.json --json-values 'spec.storage={"accessMode":"ReadWriteOnce","className":"managed-premium","size":"10Gi"}'
  requiredParameters:
  - isRequired: true
    name: --config-file -c
    summary: |-
      Data controller config file path of the config you would like to set, i.e. custom/control.json.
    isDeprecated: true
    deprecateInfo: Option '-c' has been deprecated and will be removed in a future release. Use '-p' instead.
  - isRequired: true
    name: --json-values -j
    summary: |-
      A key value pair list of json paths to values: key1.subkey1=value1,key2.subkey2=value2. You may provide inline json values such as: key='{"kind":"cluster","name":"test-cluster"}' or provide a file path, such as key=./values.json. The replace command supports conditionals through the jsonpath library.  To use this, start your path with a $. This will allow you to do a conditional such as -j $.key1.key2[?(@.key3=="someValue"].key4=value. If the inline value you are providing is a key value pair itself with "=" and "," escape those characters.  For example, key1="key2\=val2\,key3\=val3". You may see examples below. For additional help, See: https://jsonpath.com/.
  - isRequired: true
    name: --path -p
    summary: |-
      Data controller config file path of the config you would like to set, i.e. custom/control.json.
- uid: az_arcdata_dc_config_show
  name: az arcdata dc config show
  summary: |-
    Return the config of the data controller custom resource.
  status: GA
  sourceType: Extension
  syntax: >-
    az arcdata dc config show [--k8s-namespace]
                              [--use-k8s]
  optionalParameters:
  - name: --k8s-namespace -k
    summary: |-
      The Kubernetes namespace in which the data controller exists.
  - name: --use-k8s
    summary: |-
      Use local Kubernetes APIs to perform this action.
commands:
- az_arcdata_dc_config_add
- az_arcdata_dc_config_init
- az_arcdata_dc_config_list
- az_arcdata_dc_config_patch
- az_arcdata_dc_config_remove
- az_arcdata_dc_config_replace
- az_arcdata_dc_config_show
globalParameters:
- name: --debug
  summary: |-
    Increase logging verbosity to show all debug logs.
- name: --help -h
  summary: |-
    Show this help message and exit.
- name: --only-show-errors
  summary: |-
    Only show errors, suppressing warnings.
- name: --output -o
  defaultValue: "json"
  parameterValueGroup: "json, jsonc, none, table, tsv, yaml, yamlc"
  summary: |-
    Output format.
- name: --query
  summary: |-
    JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
- name: --subscription
  summary: |-
    Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
- name: --verbose
  summary: |-
    Increase logging verbosity. Use --debug for full debug logs.
metadata:
  description: Configuration commands.
